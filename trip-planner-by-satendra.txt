Directory structure:
└── satendra03-trip-planner-by-satendra.git/
    ├── README.md
    ├── LICENSE.md
    ├── components.json
    ├── index.html
    ├── jsconfig.json
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.js
    ├── vercel.json
    ├── vite.config.js
    ├── .env.sample
    ├── .eslintrc.cjs
    ├── public/
    │   ├── fonts/
    │   │   └── WEB/
    │   │       ├── README.md
    │   │       ├── css/
    │   │       │   └── satoshi.css
    │   │       └── fonts/
    │   │           ├── Satoshi-Regular.eot
    │   │           ├── Satoshi-Regular.ttf
    │   │           ├── Satoshi-Regular.woff
    │   │           └── Satoshi-Regular.woff2
    │   ├── hero/
    │   │   ├── chichen.webp
    │   │   ├── christ.webp
    │   │   ├── colosseum.webp
    │   │   ├── everest.webp
    │   │   ├── giza.webp
    │   │   ├── india.webp
    │   │   ├── liberty.webp
    │   │   ├── peru.webp
    │   │   ├── stonehenge.webp
    │   │   ├── sydney.webp
    │   │   ├── taj.webp
    │   │   ├── tower.webp
    │   │   └── wall.webp
    │   └── images/
    └── src/
        ├── App.jsx
        ├── index.css
        ├── main.jsx
        ├── Context/
        │   ├── DarkMode/
        │   │   └── ThemeProvider.jsx
        │   ├── LogInContext/
        │   │   └── Login.jsx
        │   └── RefContext/
        │       └── RefContext.jsx
        ├── Service/
        │   ├── AiModel.jsx
        │   ├── Firebase.jsx
        │   ├── GlobalApi.jsx
        │   └── temp.json
        ├── components/
        │   ├── constants/
        │   │   ├── Error.jsx
        │   │   ├── Options.jsx
        │   │   ├── ProgressBar.jsx
        │   │   └── ThemeToggle.jsx
        │   ├── custom/
        │   │   ├── Footer.jsx
        │   │   ├── Header.jsx
        │   │   ├── Hero.jsx
        │   │   └── Stats.jsx
        │   ├── routes/
        │   │   ├── all-trips/
        │   │   │   ├── Alltrips.jsx
        │   │   │   └── AlltripsCard.jsx
        │   │   ├── my-trips/
        │   │   │   ├── Cards/
        │   │   │   │   ├── HotelCards.jsx
        │   │   │   │   └── PlaceCards.jsx
        │   │   │   ├── Elements/
        │   │   │   │   ├── Hotelcard.jsx
        │   │   │   │   ├── Hotels.jsx
        │   │   │   │   ├── Locationinfo.jsx
        │   │   │   │   ├── Places.jsx
        │   │   │   │   └── Placescard.jsx
        │   │   │   └── [tripId]/
        │   │   │       └── Mytrips.jsx
        │   │   └── plan-a-trip/
        │   │       └── CreateTrip.jsx
        │   └── ui/
        │       ├── button.jsx
        │       ├── card.jsx
        │       ├── carousel.jsx
        │       ├── dialog.jsx
        │       ├── dropdown-menu.jsx
        │       ├── globe.jsx
        │       ├── input.jsx
        │       ├── marquee.jsx
        │       ├── number-ticker.jsx
        │       ├── popover.jsx
        │       └── sonner.jsx
        └── lib/
            └── utils.js








================================================
File: README.md
================================================

<div align="center">
  <h1 align="center">JourneyJolt</h1 >
  <a href="https://trip-planner-by-satendra.vercel.app/" target="_blank">
    <img src="https://i.ibb.co/X7N17ps/main.png" style="border-radius: 10px;" alt="Logo" width="" height="250">
  </a>

  <h3>AI-Based Trip Planner</h3>

  <p align="center">
    Discover personalized itineraries and curated hotel recommendations tailored to your interests. Simplify travel planning with smart suggestions for top destinations and activities, making every trip easy and enjoyable.
    <br />
    <br/>
     <div><a href="https://app.eraser.io/workspace/IT31dyj1DiiagZtyJ47a?origin=share" target="_blank"><img src="https://img.shields.io/badge/Eraser-EC2C40.svg?style=for-the-badge&logo=Eraser&logoColor=white" alt="Documentation and Flow"> </img></a></div>
     <br />
     <a href="https://buymeacoffee.com/satendra03" target="_blank"><img src="https://img.shields.io/badge/Buy%20Me%20A%20Coffee-FFDD00.svg?style=for-the-badge&logo=Buy-Me-A-Coffee&logoColor=black"></a>
    <br />
    <br />
    <a href="https://trip-planner-by-satendra.vercel.app/" target="_blank"><strong>Visit Now</strong></a>
    <br />
    <br />
<!--     <a href="https://i.ibb.co/QkSk539/Whats-App-Image-2024-11-14-at-01-51-59-0db751b0.jpg">Support Me (with Money LOL)</a> -->
<!--     • -->
    <a href="https://github.com/satendra03/trip-planner-by-satendra/issues">Report Bug</a>
  </p>
</div>
</br>
<div align="center">

## About The Project

</div>


<div class="sampleImages" align="center" style="display: flex; flex-wrap: wrap; gap: 10px; justify-content: center;">
    <a href="https://ibb.co/gRX4Bcx"><img src="https://i.ibb.co/X7N17ps/main.png" alt="image" style="border-radius: 10px; height: 170px; border: 0;"></a>
    <a href="https://ibb.co/f1zjdLn"><img src="https://i.ibb.co/TbHgn5W/form.png" alt="image-2" style="border-radius: 10px; height: 170px; border: 0;"></a>
    <a href="https://ibb.co/yySg2kP"><img src="https://i.ibb.co/QDkGLrS/trip.png" alt="image-1" style="border-radius: 10px; height: 170px; border: 0;"></a>
    <a href="https://ibb.co/26srCZS"><img src="https://i.ibb.co/bPcmZwX/all.png" alt="image-3" style="border-radius: 10px; height: 170px; border: 0;"></a>
<!--     <a href="https://ibb.co/jfty8cW"><img src="https://i.ibb.co/Khn25ML/image-5.png" alt="image-5" style="border-radius: 10px; height: 170px; border: 0;"></a> -->
<!--     <a href="https://ibb.co/r5MtJxg"><img src="https://i.ibb.co/zPb5wX1/image-4.png" alt="image-4" style="border-radius: 10px; height: 170px; border: 0;"></a> -->
</div>
</br>

**JourneyJolt** is an AI-based travel planning application designed to make trip planning _easier and more efficient_. This project leverages artificial intelligence to analyze user preferences and provide personalized recommendations for destinations, accommodations, and activities.

Key features of JourneyJolt include:
* **Personalized Recommendations**: The AI suggests ideal destinations, hotels, and activities tailored to the traveler’s preferences.
* **Automated Itinerary Generation**: The app automatically creates a full itinerary that considers factors like travel time and user preferences.

JourneyJolt aims to enhance the travel experience by providing a streamlined, easy-to-use platform for trip planning, designed for both casual travelers and frequent explorers alike.




## Built With

This project is built with the following major frameworks, libraries, and services:

* [![React](https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&background=E4E4E4)](https://reactjs.org/)
* [![Vite](https://img.shields.io/badge/Vite-000000?style=for-the-badge&logo=vite&logoColor=white)](https://vite.dev/)
* [![Tailwind CSS](https://img.shields.io/badge/Tailwind%20CSS-06B6D4?style=for-the-badge&logo=tailwindcss&logoColor=white)](https://tailwindcss.com/)
* [![Google Cloud](https://img.shields.io/badge/Google%20Cloud-4285F4?style=for-the-badge&logo=google-cloud&logoColor=white)](https://cloud.google.com/)
* [![Gemini AI](https://img.shields.io/badge/Gemini%20AI-FF5F00?style=for-the-badge&logo=google-cloud&logoColor=white)](https://cloud.google.com/blog/topics/ai-machine-learning/introducing-gemini-the-new-ai-powered-google-cloud-platform)
* [![Firebase](https://img.shields.io/badge/Firebase-FFCA28?style=for-the-badge&logo=firebase&logoColor=black)](https://firebase.google.com/)
* [![Auth0](https://img.shields.io/badge/Auth0-000000?style=for-the-badge&logo=auth0&background=E4E4E4)](https://auth0.com/)
* [![React Hot Toast](https://img.shields.io/badge/React%20Hot%20Toast-FF5733?style=for-the-badge&logo=react&logoColor=black)](https://react-hot-toast.com/)




## Getting Started

Setting up JourneyJolt is simple — just configure your ```.env``` file, and you're ready to go!

To get started with JourneyJolt, follow these instructions to set up the project locally on your machine for development and testing.

### Prerequisites

Before you begin, ensure you have the following installed:
* Node.js  _(v16.0 or above)_ - [Download Node.js](https://nodejs.org/en)
* VS Code _(Code Editor)_ - [Download VS Code](https://visualstudio.microsoft.com/downloads/)

### Services & API Keys Setup

To fully integrate JourneyJolt with third-party services, you'll need to sign up for the following services, configure the required settings, and obtain API keys. Below are the steps for each service:

 
<details>
  <summary>Google Cloud Setup</summary>
    Follow these steps to set up Google Cloud for your project:
  <ol>
    <li>Create an account on <a href="https://cloud.google.com" target="_blank">Google Cloud</a>.</li>
    <li>As a new user, you will receive a free trial with 90 days and ₹25,000 in free credits, which you can use for your project.</li>
    <li>After setting up your account, go to the <b>APIs & Services</b> section to create an API key.</li>
    <li>Next, enable the following APIs:
      <ul>
        <li>Maps JavaScript API</li>
        <li>Maps Embed API</li>
        <li>Geolocation API</li>
        <li>Geocoding API</li>
        <li>Places API</li>
        <li>Places API (New)</li>
      </ul>
    </li>
    <li>The "Places API (New)" may require you to set up a billing account. Don’t worry, your free credits are more than enough to cover the cost!</li>
    <li>Once everything is set up, you will have your Google API key ready to use.</li>
    <li>Paste the API key in your environment file: 
      <pre><code>VITE_GOOGLE_MAP_API_KEY="YOUR_GOOGLE_API_KEY"</code></pre>
    </li>
  </ol>
</details>

<details>
  <summary>Gemini API Setup</summary>
    Follow these steps to set up the Gemini API:
  <ol>
    <li>Go to the <a href="https://ai.google.dev/" target="_blank">Gemini AI website</a>.</li>
    <li>Create an account if you don't have one, or sign in with your existing account.</li>
    <li>The Gemini API is free, meaning there are no charges associated with using it for your project.</li>
    <li>Once your account is set up, you can start using the Gemini API for your project.</li>
    <li>Paste the API key in your environment file: 
      <pre><code>VITE_GEMINI_API_KEY="YOUR_GEMINI_API_KEY"</code></pre>
    </li>
  </ol>
</details>


<details>
  <summary>Auth0 Setup</summary>
  <p>
    Follow these steps to set up Auth0 for your project:
  </p>
  <ol>
    <li>Go to the <a href="https://auth0.com/" target="_blank">Auth0 website</a>.</li>
    <li>Create a free account. The free plan supports up to 25,000 monthly active users, which is more than enough for our project.</li>
    <li>After signing up, select the type of project you are creating. Choose "Single Page Application" as we are building a React app.</li>
    <li>Once your account is set up, create a new application within Auth0.</li>
    <li>Go to the settings of the created application to get the authentication credentials.</li>
    <li>You'll need the following credentials:
      <ul>
        <li><strong>Domain Name</strong></li>
        <li><strong>Client ID</strong></li>
      </ul>
    </li>
    <li>Paste the credentials into your environment file:
      <pre><code>VITE_DOMAIN_NAME="your-auth0-domain"</code></pre>
      <pre><code>VITE_AUTH0_CLIENT_ID="your-client-id"</code></pre>
    </li>
  </ol>
  <p><strong>Important Note:</strong> After running the project, you will need to configure the callback URL and logout URL in the Auth0 application settings. The callback URL should be the hosted URL of your React app when it is running locally or deployed. <em>(generally: http://localhost:5173/)</em></p>
</details>

<details>
  <summary>Firebase Setup</summary>
  <ul>
    <li>Visit the <a href="https://firebase.google.com/">Firebase website</a> and create an account or log in if you already have one.</li>
    <li>Once logged in, create a new project by clicking on "Add Project". Follow the prompts for setting up the project. Choose the "Test mode" option for the database so you can easily set up read and write permissions.</li>
    <li>After the project is created, click on the "Web" icon to create a new web app within the Firebase project.</li>
    <li>Follow the prompts to register your app. Firebase will provide you with the necessary configuration details during this step.</li>
    <li>Once the web app is created, go to your Firebase Console, and select the project you just created.</li>
    <li>Create Firestore Databse, this will be the actaul database where we will store everything</li>
    <li>In Firestore Databse, go to the "Rules" tab and edit the read and write rules so that you can save data <br /> <code>allow read, write: if request.time < timestamp.date(2099, 8, 18);</code>
    </li>
    <li>Navigate to the "Project settings" by clicking on the gear icon near the top left corner.</li>
    <li>In the "General" tab, you will find the credentials for your Firebase project. These credentials are needed to set up Firebase in your React project.</li>
    <li>Copy the credentials provided by Firebase (e.g., API key, auth domain, etc.) and paste them into your `.env` file with the following format:</li>
  </ul>
  <pre>
    VITE_FIREBASE_API_KEY = "your-api-key-here"
    VITE_FIREBASE_AUTH_DOMAIN = "your-auth-domain-here"
    VITE_FIREBASE_PROJECT_ID = "your-project-id-here"
    VITE_FIREBASE_STORAGE_BUCKET = "your-storage-bucket-here"
    VITE_FIREBASE_MESSAGING_SENDER_ID = "your-messaging-sender-id-here"
    VITE_FIREBASE_APP_ID = "your-app-id-here"
    VITE_MEASUREMENT_ID = "your-measurement-id-here"
  </pre>
</details>




</br>
<div align="center">

## Installation

</div>

The installation process is straightforward. You can either clone the repository or download the zip file of the code.

### Steps to Install and Set Up:

1. **Clone the repository or download the ZIP file**  
   - To clone the repo, run the following command:
     ```sh
     https://github.com/satendra03/trip-planner-by-satendra.git
     ```
   - Alternatively, you can download the ZIP file from the repository page and extract it.

2. **Open the project folder in a code editor**  
   Open the folder in your preferred code editor (e.g., [VS Code](https://code.visualstudio.com/)).

3. **Set up the `.env` file**  
   The main objective is to set up your `.env` file with the necessary API keys.  
   - Follow the steps in the **Setup and API Keys** section to get the required API keys for Google Cloud, Gemini API, Auth0, and Firebase.
   - After getting the keys, create a `.env` file in the root of the project and add the required keys like so:
     ```env
     VITE_GOOGLE_MAP_API_KEY = "your-google-api-key"
     VITE_GEMINI_API_KEY = "your-gemini-api-key"
     VITE_AUTH0_CLIENT_ID = "your-auth0-client-id"
     VITE_DOMAIN_NAME = "your-auth0-domain-name"
     VITE_FIREBASE_API_KEY = "your-firebase-api-key"
     VITE_FIREBASE_AUTH_DOMAIN = "your-firebase-auth-domain"
     VITE_FIREBASE_PROJECT_ID = "your-firebase-project-id"
     VITE_FIREBASE_STORAGE_BUCKET = "your-firebase-storage-bucket"
     VITE_FIREBASE_MESSAGING_SENDER_ID = "your-firebase-messaging-sender-id"
     VITE_FIREBASE_APP_ID = "your-firebase-app-id"
     VITE_MEASUREMENT_ID = "your-firebase-measurement-id"
     ```

4. **Install required NPM packages**  
   Once the `.env` file is set up, install the required NPM packages:
   ```sh
   npm install
   ```

5. **Run the Project**  
  After the packages are installed, you can start the development server by running:
   ```sh
   npm run dev
   ```
    This will run the project locally and you can access it at http://localhost:5173.

#### By following these simple steps, you'll have the project up and running in no time!



</br>
<div align="center">

## Roadmap

</div>

The roadmap represents the challenges and updates that I plan to implement in the future. As I continue to enhance the project, I encourage you to try completing these tasks as well and contribute to the project. Collaboration is welcome, and feel free to open pull requests with improvements or fixes. Here's what's coming next:

- [x] Set up project environment with API keys
- [x] Add Google Cloud API integration for Maps, Geolocation, and Places
- [x] Add Gemini AI API integration for AI-based content generation
- [x] Set up Auth0 authentication for secure login (including Callback URL setup)
- [x] Add Firebase integration for real-time data storage
- [x] Implement a more user-friendly UI for API Key setup
- [ ] Implement additional functionality for Google Maps (e.g., custom markers)
- [x] Optimize app for mobile devices
- [ ] Implement unit testing for all components
- [ ] Add better error handling for API integrations
- [ ] Multi-language Support
    - [ ] Hindi
- [x] Deploy the project to a cloud platform (e.g., Firebase Hosting, Vercel)
- [ ] Add detailed logging for API requests and responses
- [ ] Implement automatic configuration of environment variables from the UI




</br>
<div align="center">

## Contributing

</div>
Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are <b>greatly appreciated</b>. <br />

<p>Or Maybe you can just  <a href="https://buymeacoffee.com/satendra03" target="_blank"><img src="https://img.shields.io/badge/Buy%20Me%20A%20Coffee-FFDD00.svg?style=for-the-badge&logo=Buy-Me-A-Coffee&logoColor=black"></a></p>

If you have an idea or feature that would make this project even better, please feel free to contribute. Whether it's fixing bugs, adding new features, improving documentation, or anything else, your help is welcome!

### How to Contribute:

1. **Fork the repository**  
   Click on the "Fork" button at the top of this repo to create a copy of the repository on your own GitHub account.

2. **Clone the repo**  
   Clone your forked version of the repo to your local machine.  
   ```sh
   git clone https://github.com/satendra03/trip-planner-by-satendra.git
   ```

3. **Create your feature branch**  
   Create a new branch for the feature you're working on.
   ```sh
   git checkout -b feature/your-feature-nam
   ```

4. **Make your Changes**  
   Modify the code, add new features, or fix bugs. Don't forget to test your changes!


5. **Commit your changes**  
   Commit the changes you've made with a descriptive message.
   ```sh
   git commit -m 'Add a new feature or fix a bug'
   ```

6. **Push to your branch**  
   Push the changes to your forked repo.
   ```sh
   git push origin feature/your-feature-name
   ```
 
4. **Open a Pull Request**  
   Go to the original repo and click "New Pull Request". Select your branch and provide a description of what your changes do. Once you're ready, submit the pull request!
  

## Report Issues and Suggestions
If you encounter a bug or have a suggestion to improve the project, please open an [issue](https://github.com/satendra03/trip-planner-by-satendra/issues) on the Issues page. If it's a new feature or improvement, tag it as an "enhancement".


</br>
<div align="center">

## License

</div>
Distributed under the MIT License. See <code>LICENSE.md</code> for more information.


</br>
<div align="center">

## Contact Us

</div>
We’d love to hear from you! Whether you have a question, suggestion, or issue to report, feel free to get in touch with us.

### Ways to Contact Us:

1. **GitHub Issues**: You can open an issue directly on this repository for bugs, feature requests, or general inquiries.
   - [Open an Issue](https://github.com/satendra03/trip-planner-by-satendra/issues)

2. **Email**: Reach out to us via email at:
   - **satendrakumarparteti.work@gmail.com** 

3. **Social Media**:
   - **Instagram**: [@_satendra_03](https://www.instagram.com/_satendra_03/)
   - **LinkedIn**: [Satendra Kumar Parteti](https://www.linkedin.com/in/connect-satendra/)
4. **Buy Me A Coffee**:
   - **Small Contibution**:  <a href="https://buymeacoffee.com/satendra03" target="_blank"><img src="https://img.shields.io/badge/Buy%20Me%20A%20Coffee-FFDD00.svg?style=for-the-badge&logo=Buy-Me-A-Coffee&logoColor=black"></a>
---


================================================
File: LICENSE.md
================================================
MIT License

Copyright (c) [2024] [Satendra Kumar Parteti]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


================================================
File: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": false,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================================================
File: index.html
================================================
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/icon.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Journey • Jolt</title>  
</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html>



<!--  <!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <link rel="icon" type="image/svg+xml" href="/icon.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>JourneyJolt • AI Trip Planner | Personalized Travel Planning</title>
  <meta name="description" content="JourneyJolt - AI-Based Trip Planner for Personalized Itineraries & Hotels. JourneyJolt takes the hassle out of travel planning with AI-driven itineraries tailored to your interests and schedule. Discover curated recommendations for top destinations, handpicked hotels, and activity suggestions to make the most of your trip. Perfect for solo travelers, families, and groups alike, JourneyJolt makes it easy to explore new places with confidence and convenience." />


  <meta property="og:type" content="website" />
  <meta property="og:title" content="JourneyJolt • AI Trip Planner | Personalized Travel Planning" />
  <meta property="og:description" content="Effortlessly plan your trips with JourneyJolt's AI-powered trip planner. Get personalized travel recommendations and create itineraries in minutes!" />
  <meta property="og:image" content="https://drive.google.com/drive-viewer/AKGpihYNeK2wt4QqeocD7K8wgqGI6hcjxHbauveI8QiZUAGB-__Z_R9OQEj506_8LGRm6JAJAJwegFL9eE9QaHFyLOV0DqWFndg61bo=w1920-h927-rw-v1" />
  <meta property="og:url" content="https://trip-planner-by-satendra.vercel.app/" />


  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="JourneyJolt • AI Trip Planner" />
  <meta name="twitter:description" content="Discover personalized travel planning with JourneyJolt. Our AI-powered trip planner tailors every itinerary to fit your preferences." />
  <meta name="twitter:image" content="https://drive.google.com/drive-viewer/AKGpihYNeK2wt4QqeocD7K8wgqGI6hcjxHbauveI8QiZUAGB-__Z_R9OQEj506_8LGRm6JAJAJwegFL9eE9QaHFyLOV0DqWFndg61bo=w1920-h927-rw-v1" />

  <meta name="robots" content="index, follow" />
   <meta name="keywords" content="ai trip planner, personalized travel recommendations, smart travel planning, trip planner, ai trip maker, road trip planner, vacation planner, trip planner ai, best route planner, holiday planner, route planning, plan my trip, build ai trip planner, map my route, itinerary planner, journey planner, itinerary maker, road trip planner free, trip planning websites, ai travel planner, best trip planning website, vacation trip planner, travel itinerary planner, travel planning, vacation finder, plan your trip, plan my road trip, travel planning websites, my route planner, road trip planner with stops, trip finder, online route planner, plan my journey, business trip planner, trip planner map, trip planner buildai, trip planner online, trip itinerary planner, plan my trip for me, plan my vacation, eurail trip planner, free trip planner, roadtrippers trip planner, business travel planner, plan my holiday, tour planner, buildai trip planner, best road trip planner, map my trip, corporate travel planner, plan a vacation for me, itinerary creator, trip route planner, map planner, best trip planner, road trip route planner, road trip map creator, european vacation planner, online itinerary maker, best free road trip planner, easy trip planners, trip planner flights, trip creator, ai trip planner free, corporate trip planner, plan your route, trip planner ai free, trip organizer, map planner route, best vacation planning sites, best travel planning websites, eurotrip planner, itinerary maker free, map itinerary maker, best way to plan a trip, holiday trip planner, group trip planner, quickest route planner, vacation planner website, travel ai planner, travel finder, travel route planner, online holiday planner, travel map planner, travel planning companies, vacation planner near me, trip maker, road map planner, plan your journey, trip planner road trip, travel advisors near me, road route planner, plan a trip for me, free itinerary planner, route planning free, map my road trip, tripit travel planner, travel planner business, travel planner online, personal travel planner" />

   <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "WebSite",
      "name": "JourneyJolt",
      "url": "https://trip-planner-by-satendra.vercel.app/",
      "description": "AI-powered trip planner for creating personalized travel itineraries and smart travel recommendations.",
      "image": "https://drive.google.com/drive-viewer/AKGpihYNeK2wt4QqeocD7K8wgqGI6hcjxHbauveI8QiZUAGB-__Z_R9OQEj506_8LGRm6JAJAJwegFL9eE9QaHFyLOV0DqWFndg61bo=w1920-h927-rw-v1",
      "creator": {
        "@type": "Organization",
        "name": "JourneyJolt"
      }
    }
    </script>

</head>

<body>
  <div id="root"></div>
  <script type="module" src="/src/main.jsx"></script>
</body>

</html> -->


================================================
File: jsconfig.json
================================================
{
    "compilerOptions": {
      // ...
      "baseUrl": ".",
      "paths": {
        "@/*": [
          "./src/*"
        ]
      }
      // ...
    }
  }
  

================================================
File: package.json
================================================
{
  "name": "trip-planner",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite --host",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview",
    "proxy": "lcp --proxyUrl https://www.googleapis.com"
  },
  "dependencies": {
    "@auth0/auth0-react": "^2.2.4",
    "@google/generative-ai": "^0.15.0",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-slot": "^1.1.1",
    "@react-oauth/google": "^0.12.1",
    "axios": "^1.7.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cobe": "^0.6.3",
    "embla-carousel-react": "^8.5.1",
    "firebase": "^10.14.1",
    "framer-motion": "^11.15.0",
    "gsap": "^3.12.5",
    "lucide-react": "^0.408.0",
    "next-themes": "^0.3.0",
    "nprogress": "^0.2.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-google-autocomplete": "^2.7.3",
    "react-google-places-autocomplete": "^4.1.0",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.4.0",
    "react-responsive": "^10.0.0",
    "react-router-dom": "^6.28.1",
    "react-spring": "^9.7.5",
    "sonner": "^1.7.1",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.57.1",
    "eslint-plugin-react": "^7.34.3",
    "eslint-plugin-react-hooks": "^4.6.2",
    "eslint-plugin-react-refresh": "^0.4.7",
    "postcss": "^8.4.39",
    "tailwindcss": "^3.4.17",
    "vite": "^5.4.11"
  }
}


================================================
File: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


================================================
File: tailwind.config.js
================================================
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{js,jsx}',
    './components/**/*.{js,jsx}',
    './app/**/*.{js,jsx}',
    './src/**/*.{js,jsx}',
  ],
  prefix: "",
  theme: {
  	container: {
  		center: true,
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		screens: {
  			'custom-370': '370px',
  			'custom-435': '435px',
  			'custom-500': '500px',
  			'custom-600': '600px'
  		},
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			},
  			marquee: {
  				from: {
  					transform: 'translateX(0)'
  				},
  				to: {
  					transform: 'translateX(calc(-100% - var(--gap)))'
  				}
  			},
  			'marquee-vertical': {
  				from: {
  					transform: 'translateY(0)'
  				},
  				to: {
  					transform: 'translateY(calc(-100% - var(--gap)))'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out',
  			marquee: 'marquee var(--duration) infinite linear',
  			'marquee-vertical': 'marquee-vertical var(--duration) linear infinite'
  		},
  		fontFamily: {
  			SatoshiLight: [
  				'Satoshi-Light',
  				'sans-serif'
  			],
  			SatoshiLightItalic: [
  				'Satoshi-LightItalic',
  				'sans-serif'
  			],
  			SatoshiRegular: [
  				'Satoshi-Regular',
  				'sans-serif'
  			],
  			SatoshiItalic: [
  				'Satoshi-Italic',
  				'sans-serif'
  			],
  			SatoshiMedium: [
  				'Satoshi-Medium',
  				'sans-serif'
  			],
  			SatoshiMediumItalic: [
  				'Satoshi-MediumItalic',
  				'sans-serif'
  			],
  			SatoshiBold: [
  				'Satoshi-Bold',
  				'sans-serif'
  			],
  			SatoshiBoldItalic: [
  				'Satoshi-BoldItalic',
  				'sans-serif'
  			],
  			SatoshiBlack: [
  				'Satoshi-Black',
  				'sans-serif'
  			],
  			SatoshiBlackItalic: [
  				'Satoshi-BlackItalic',
  				'sans-serif'
  			],
  			SatoshiVariable: [
  				'Satoshi-Variable',
  				'sans-serif'
  			],
  			SatoshiVariableItalic: [
  				'Satoshi-VariableItalic',
  				'sans-serif'
  			]
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

================================================
File: vercel.json
================================================
{
    "rewrites": [
        {
            "source": "/(.*)",
            "destination": "/"
        }
    ]
}

================================================
File: vite.config.js
================================================
import path from "path"
import react from "@vitejs/plugin-react"
import { defineConfig } from "vite"

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})


================================================
File: .env.sample
================================================
# from Google Cloud
VITE_GOOGLE_MAP_API_KEY = ""

# from Gemini APi
VITE_GEMINI_API_KEY = ""

# from auth0
VITE_DOMAIN_NAME = ""
VITE_AUTH0_CLIENT_ID =""

#from firebase
VITE_FIREBASE_API_KEY = ""
VITE_FIREBASE_AUTH_DOMAIN = ""
VITE_FIREBASE_PROJECT_ID = ""
VITE_FIREBASE_STORAGE_BUCKET = ""
VITE_FIREBASE_MESSAGING_SENDER_ID = ""
VITE_FIREBASE_APP_ID = ""
VITE_MEASUREMENT_ID = ""


================================================
File: .eslintrc.cjs
================================================
module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react/jsx-runtime',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parserOptions: { ecmaVersion: 'latest', sourceType: 'module' },
  settings: { react: { version: '18.2' } },
  plugins: ['react-refresh'],
  rules: {
    'react/jsx-no-target-blank': 'off',
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
  },
}


================================================
File: public/fonts/WEB/README.md
================================================
# Installing Webfonts
Follow these simple Steps.

## 1.
Put `satoshi/` Folder into a Folder called `fonts/`.

## 2.
Put `satoshi.css` into your `css/` Folder.

## 3. (Optional)
You may adapt the `url('path')` in `satoshi.css` depends on your Website Filesystem.

## 4.
Import `satoshi.css` at the top of you main Stylesheet.

```
@import url('satoshi.css');
```

## 5.
You are now ready to use the following Rules in your CSS to specify each Font Style:
```
font-family: Satoshi-Light;
font-family: Satoshi-LightItalic;
font-family: Satoshi-Regular;
font-family: Satoshi-Italic;
font-family: Satoshi-Medium;
font-family: Satoshi-MediumItalic;
font-family: Satoshi-Bold;
font-family: Satoshi-BoldItalic;
font-family: Satoshi-Black;
font-family: Satoshi-BlackItalic;
font-family: Satoshi-Variable;
font-family: Satoshi-VariableItalic;

```
## 6. (Optional)
Use `font-variation-settings` rule to controll axes of variable fonts:
wght 900.0

Available axes:
'wght' (range from 300.0 to 900.0



================================================
File: public/fonts/WEB/css/satoshi.css
================================================
@font-face {
  font-family: 'Satoshi-Regular';
  src: url('../fonts/Satoshi-Regular.woff2') format('woff2'),
       url('../fonts/Satoshi-Regular.woff') format('woff'),
       url('../fonts/Satoshi-Regular.ttf') format('truetype');
  font-weight: 400;
  font-display: swap;
  font-style: normal;
}

================================================
File: src/App.jsx
================================================
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
  useLocation,
} from "react-router-dom";
import Header from "./components/custom/Header.jsx";
import Hero from "./components/custom/Hero.jsx";
import CreateTrip from "./components/routes/plan-a-trip/CreateTrip.jsx";
import Mytrips from "./components/routes/my-trips/[tripId]/Mytrips.jsx";
import { useContext, useEffect, useRef, useState } from "react";
import { LogInContext } from "./Context/LogInContext/Login.jsx";
import Footer from "./components/custom/Footer.jsx";
import Alltrips from "./components/routes/all-trips/Alltrips.jsx";
import toast from "react-hot-toast";
import gsap from "gsap";
import ProgressBar from "./components/constants/ProgressBar.jsx";
import { useRefContext } from "./Context/RefContext/RefContext.jsx";

function App() {
  const { user, isAuthenticated } = useContext(LogInContext);
  const [loggedIn, setLoggedIn] = useState(false);

  const location = useLocation();

  const headerRef = useRef(null);
  const heroRef = useRef(null);
  const createTripPageRef = useRef(null);
  const footerRef = useRef(null);
  const { locationInfoRef } = useRefContext();

  useEffect(() => {
    if (!loggedIn && isAuthenticated) {
      setLoggedIn(true);
      toast.success("Logged In Successfully");
    }
  }, [user]);

  useEffect(() => {
    const timeline = gsap.timeline({ defaults: { ease: "elastic.out(1,1)" } });

    // Header
    timeline.from(headerRef.current, { delay: 0.5, opacity: 0, y: -100 });

    // Hero
    const heading = heroRef.current?.querySelector(".heading");
    const desc = heroRef.current?.querySelector(".desc");
    const buttons = heroRef.current?.querySelector(".buttons");
    const marquee = heroRef.current?.querySelector(".marquee");
    if (heading && desc && buttons && marquee) {
      timeline
        .from(heading, { opacity: 0, y: 100 })
        .from(desc, { opacity: 0, y: 100 }, "-=0.3")
        .from(buttons, { opacity: 0, y: 100 }, "-=0.3")
        .from(marquee, { y: 100, opacity: 0 }, "-=0.3");
    }

    // Create Trip Page
    const text = createTripPageRef.current?.querySelector(".text");
    const place = createTripPageRef.current?.querySelector(".place");
    const day = createTripPageRef.current?.querySelector(".day");
    const budget = createTripPageRef.current?.querySelector(".budget");
    const people = createTripPageRef.current?.querySelector(".people");
    const createTripBtn =
      createTripPageRef.current?.querySelector(".create-trip-btn");
    if (text && place && day && budget && people && createTripBtn) {
      timeline
        .from(text, { opacity: 0, y: 100 })
        .from(place, { opacity: 0, y: 100 }, "-=0.3")
        .from(day, { opacity: 0, y: 100 }, "-=0.3")
        .from(budget, { opacity: 0, y: 100 }, "-=0.3")
        .from(people, { opacity: 0, y: 100 }, "-=0.3")
        .from(createTripBtn, { opacity: 0, y: 100 }, "-=0.3");
    }

    // Location info
    const location = locationInfoRef?.current?.querySelector(".location");
    const carousel = locationInfoRef?.current?.querySelectorAll(".carousel");
    const locationInfo =
      locationInfoRef?.current?.querySelector(".location-info");
    if (location && carousel && locationInfo) {
      timeline
        .from(location, { opacity: 0, y: 100 })
        .from(carousel, { opacity: 0, y: 100 })
        .from(locationInfo, { opacity: 0, y: 100 });
    }

    // Footer
    timeline.from(footerRef.current, { opacity: 0, y: 100 });

    return () => {
      timeline.kill();
    };
  }, [location.pathname]);

  return (
    <>
      <ProgressBar />
      <div className="app tracking-tighter min-w-[320px]">
        <Header headerRef={headerRef} />
        <div className="container max-w-[1024px] w-full min-w-[320px] h-auto">
          <Routes>
            <Route path="/" element={<Hero heroRef={heroRef} />} />
            <Route
              path="/plan-a-trip"
              element={<CreateTrip createTripPageRef={createTripPageRef} />}
            />
            <Route
              path="/my-trips/:tripId"
              element={isAuthenticated ? <Mytrips /> : <Hero />}
            />
            <Route
              path="/all-trips"
              element={isAuthenticated ? <Alltrips /> : <Hero />}
            />
          </Routes>
        </div>
        <Footer footerRef={footerRef} />
      </div>
    </>
  );
}

export default App;


================================================
File: src/index.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Manrope:wght@200..800&display=swap');
@import url('/fonts/WEB/css/satoshi.css');

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
    font-family: Satoshi-Regular, "Manrope", 'Arial Narrow', Arial, sans-serif;
  }
  body {
    @apply bg-background text-foreground;
  }
}

::-webkit-scrollbar{
  display: none;
}

================================================
File: src/main.jsx
================================================
import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App.jsx";
import "./index.css";
import { Auth0Provider } from "@auth0/auth0-react";
import { LogInContextProvider } from "./Context/LogInContext/Login.jsx";
import ErrorBoundary from "./components/constants/Error.jsx";
import { Toaster } from "react-hot-toast";
import { BrowserRouter } from "react-router-dom";
import { ThemeProvider } from "./Context/DarkMode/ThemeProvider.jsx";
import { RefProvider } from "./Context/RefContext/RefContext.jsx";

ReactDOM.createRoot(document.getElementById("root")).render(
  <BrowserRouter>
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      <Auth0Provider
        domain={import.meta.env.VITE_DOMAIN_NAME}
        clientId={import.meta.env.VITE_AUTH0_CLIENT_ID}
        authorizationParams={{
          redirect_uri: window.location.origin,
        }}
      >
        <RefProvider>
          <LogInContextProvider>
            <ErrorBoundary>
              <Toaster />
              <App />
            </ErrorBoundary>
          </LogInContextProvider>
        </RefProvider>
      </Auth0Provider>
    </ThemeProvider>
  </BrowserRouter>
);


================================================
File: src/Context/DarkMode/ThemeProvider.jsx
================================================
import React, { createContext, useContext, useEffect, useState } from "react";

const initialState = {
  theme: "system",
  setTheme: () => null,
};

const ThemeProviderContext = createContext(initialState);

export function ThemeProvider({ children, defaultTheme = "system", storageKey = "vite-ui-theme" }) {
  const [theme, setTheme] = useState(() => {
    return localStorage.getItem(storageKey) || defaultTheme;
  });

  useEffect(() => {
    const root = window.document.documentElement;

    root.classList.remove("light", "dark");

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
      root.classList.add(systemTheme);
      return;
    }

    root.classList.add(theme);
  }, [theme]);

  const value = {
    theme,
    setTheme: (newTheme) => {
      localStorage.setItem(storageKey, newTheme);
      setTheme(newTheme);
    },
  };

  return (
    <ThemeProviderContext.Provider value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }

  return context;
};

export default useTheme;


================================================
File: src/Context/LogInContext/Login.jsx
================================================
import { useAuth0 } from "@auth0/auth0-react";
import { createContext, useState } from "react";

export const LogInContext = createContext(null);

export const LogInContextProvider = (props) => {
    const { user, loginWithPopup, logout, isAuthenticated } = useAuth0();
    const [trip, setTrip] = useState([]);
    return (
        <LogInContext.Provider value={{user, loginWithPopup, logout, isAuthenticated, trip, setTrip}}>
            {props.children}
        </LogInContext.Provider>
    )   
}


================================================
File: src/Context/RefContext/RefContext.jsx
================================================
import { createContext, useContext, useRef } from "react";
const RefContext = createContext(null);

export const RefProvider = (props) => {
  const locationInfoRef = useRef(null);
  const holetsRef = useRef(null);
  const placesRef = useRef(null);

  return (
    <RefContext.Provider value={{ locationInfoRef, holetsRef, placesRef }}>
      {props.children}
    </RefContext.Provider>
  );
};

export const useRefContext = () => useContext(RefContext);

================================================
File: src/Service/AiModel.jsx
================================================
import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
const genAI = new GoogleGenerativeAI(apiKey);

const model = genAI.getGenerativeModel({
  model: "gemini-1.5-flash",
});

const generationConfig = {
  temperature: 1,
  topP: 0.95,
  topK: 40, // new Value ( fixed the error )
  maxOutputTokens: 8192,
  responseMimeType: "application/json",
};

export const chatSession = model.startChat({
  generationConfig,
  history: [
    {
      role: "user",
      parts: [
        {
          text: "Create an optimal trip itinerary based on the specified location, duration, budget, and number of persons. Generate Travel Plan for Location: {Bhopal} for no of days: {3} Days with no of People or group: {4-5} with Budget: {Luxury}; give me list of hotels with hotel name, description, address, rating, price, location in map, coordinates, image url; also for the same create the itinerary for {4-5} days, suggest places, give name, details, pricing, timings, place images urls, location (coordinate or in map); Remember all have to cover in the {Luxury} level budget. Important: give the result in JSON Format",
        },
      ],
    },
    {
      role: "model",
      parts: [
        {
          text: '```json\n{\n  "location": "Bhopal",\n  "duration": 3,\n  "budget": "Luxury",\n  "people": 4,\n  "hotels": [\n    {\n      "name": "Jehan Numa Palace Hotel",\n      "description": "A heritage hotel with opulent rooms, a sprawling garden, and a rooftop pool offering panoramic views of the city.",\n      "address": "1, Shamla Hills, Near Van Vihar National Park, Bhopal, Madhya Pradesh 462003",\n      "rating": 4.5,\n      "price": "₹15,000 - ₹30,000 per night",\n      "location": "https://goo.gl/maps/j12Q3Z5g5aL9R7T9",\n      "coordinates": "23.2594, 77.4096",\n      "image_url": "https://images.thrillophilia.com/image/upload/s--7i8t9L4h--/c_fill,f_auto,fl_progressive,h_600,q_auto,w_900/v1/images/photos/000/009/817/original/jehan_numa_palace_hotel_bhopal_hotel_exterior_view.jpg"\n    },\n    {\n      "name": "The Lalit, Bhopal",\n      "description": "A modern and luxurious hotel with elegant rooms, a rooftop pool, a spa, and multiple dining options.",\n      "address": "122, VIP Road, Near New Market, Bhopal, Madhya Pradesh 462003",\n      "rating": 4.2,\n      "price": "₹12,000 - ₹25,000 per night",\n      "location": "https://goo.gl/maps/bYfX1V85QmG96y3y",\n      "coordinates": "23.2582, 77.4118",\n      "image_url": "https://www.thelaLit.com/images/hotels/the-lalit-bhopal/home-slider-image-1.jpg"\n    },\n    {\n      "name": "Hotel Lake View Ashok",\n      "description": "A lakeside hotel with stunning views of the Upper Lake, comfortable rooms, and an outdoor pool.",\n      "address": "Shahpura, Near Van Vihar National Park, Bhopal, Madhya Pradesh 462016",\n      "rating": 4,\n      "price": "₹8,000 - ₹18,000 per night",\n      "location": "https://goo.gl/maps/2D19M97kC451wK7b",\n      "coordinates": "23.2438, 77.4253",\n      "image_url": "https://www.hotellakeviewashok.com/images/gallery/gallery_3.jpg"\n    }\n  ],\n  "itinerary": [\n    {\n      "day": 1,\n      "title": "Exploring the City\'s Heart",\n      "places": [\n        {\n          "name": "Bharat Bhavan",\n          "details": "A renowned cultural center showcasing Indian art, craft, and literature.",\n          "pricing": "Entry Fee: ₹50 per person",\n          "timings": "10:00 AM - 6:00 PM",\n          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Bharat_Bhavan_Bhopal.jpg/1280px-Bharat_Bhavan_Bhopal.jpg",\n          "location": "https://goo.gl/maps/M1aJqM9J9L6YzY9b"\n        },\n        {\n          "name": "Rajwada",\n          "details": "A magnificent palace built in the 18th century, showcasing the grandeur of the Bhopal State.",\n          "pricing": "Entry Fee: ₹20 per person",\n          "timings": "9:00 AM - 6:00 PM",\n          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Rajwada_Bhopal.jpg/1280px-Rajwada_Bhopal.jpg",\n          "location": "https://goo.gl/maps/2LhR6YfG84RjX2Q9"\n        },\n        {\n          "name": "Moti Masjid",\n          "details": "A beautiful mosque known for its intricate marble work and elegant architecture.",\n          "pricing": "Free Entry",\n          "timings": "5:00 AM - 8:00 PM",\n          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Moti_Masjid_%28Bhopal%29.jpg/1280px-Moti_Masjid_%28Bhopal%29.jpg",\n          "location": "https://goo.gl/maps/6D14aU3p13wZ3g83"\n        }\n      ]\n    },\n    {\n      "day": 2,\n      "title": "Nature and History",\n      "places": [\n        {\n          "name": "Van Vihar National Park",\n          "details": "A lush green sanctuary home to various wildlife species, ideal for a relaxing day.",\n          "pricing": "Entry Fee: ₹50 per person",\n          "timings": "8:00 AM - 6:00 PM",\n          "image_url": "https://www.bhopal.nic.in/sites/default/files/styles/medium/public/vanvihar_national_park.jpg",\n          "location": "https://goo.gl/maps/Y1z3D7CqHq4y4wF7"\n        },\n        {\n          "name": "Upper Lake",\n          "details": "A serene lake offering scenic views, boat rides, and a chance to soak in the tranquility.",\n          "pricing": "Boat Ride: ₹100 - ₹500 per person",\n          "timings": "8:00 AM - 8:00 PM",\n          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Upper_Lake_Bhopal_India.jpg/1280px-Upper_Lake_Bhopal_India.jpg",\n          "location": "https://goo.gl/maps/1S1N3bU47N26529v"\n        },\n        {\n          "name": "State Museum",\n          "details": "A comprehensive museum showcasing the history, art, and culture of Madhya Pradesh.",\n          "pricing": "Entry Fee: ₹20 per person",\n          "timings": "10:00 AM - 5:00 PM",\n          "image_url": "https://www.bhopal.nic.in/sites/default/files/styles/medium/public/state_museum.jpg",\n          "location": "https://goo.gl/maps/v3z4K9C931vD69s8"\n        }\n      ]\n    },\n    {\n      "day": 3,\n      "title": "Religious Sites and Culinary Delights",\n      "places": [\n        {\n          "name": "Taj-ul-Masjid",\n          "details": "One of the largest mosques in India, known for its grandeur and intricate architecture.",\n          "pricing": "Free Entry",\n          "timings": "5:00 AM - 8:00 PM",\n          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Taj_ul_Masjid_Bhopal.jpg/1280px-Taj_ul_Masjid_Bhopal.jpg",\n          "location": "https://goo.gl/maps/C9M1nR2zW1Qm6K7g"\n        },\n        {\n          "name": "Birla Mandir",\n          "details": "A serene Hindu temple dedicated to Lord Vishnu, offering panoramic views of the city.",\n          "pricing": "Free Entry",\n          "timings": "6:00 AM - 8:00 PM",\n          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Birla_Mandir_Bhopal_India.jpg/1280px-Birla_Mandir_Bhopal_India.jpg",\n          "location": "https://goo.gl/maps/2x6kQ76F4c4s776R"\n        },\n        {\n          "name": "Bhopal Food Tour",\n          "details": "Experience the rich culinary heritage of Bhopal with a guided food tour, sampling local delicacies.",\n          "pricing": "₹1,500 - ₹2,500 per person",\n          "timings": "11:00 AM - 3:00 PM",\n          "image_url": "https://www.holidify.com/images/cmsuploads/2019/02/08/best-food-in-bhopal_1549636789.jpg",\n          "location": "Various locations in the city"\n        }\n      ]\n    }\n  ]\n}\n```\n\n**Note:** This itinerary is based on a luxury budget, which means the suggested hotels and activities cater to higher-end preferences. The prices for attractions and food tours are approximate and may vary depending on the chosen provider. The coordinates provided are for the general area and may not be exact pinpoint locations. It\'s always recommended to confirm the latest information and availability before your trip. \n',
        },
      ],
    },
  ],
});


================================================
File: src/Service/Firebase.jsx
================================================
import { initializeApp } from "firebase/app";
import { getAnalytics } from "firebase/analytics";
import { getFirestore } from "firebase/firestore"

const firebaseConfig = {
  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,
  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,
  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,
  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
  appId: import.meta.env.VITE_FIREBASE_APP_ID,
  measurementId: import.meta.env.VITE_MEASUREMENT_ID
};

// Initialize Firebase
export const app = initializeApp(firebaseConfig);
export const db = getFirestore(app);
// const analytics = getAnalytics(app);

================================================
File: src/Service/GlobalApi.jsx
================================================
import axios from "axios";

const BASE_URL = "https://places.googleapis.com/v1/places:searchText";

const configPlace = {
  headers: {
    "Content-Type": "application/json",
    "X-Goog-Api-Key": import.meta.env.VITE_GOOGLE_MAP_API_KEY,
    "X-Goog-FieldMask": [
      "places.id",
      "places.name",
      "places.displayName",
      "places.formattedAddress",
      "places.photos",
      "places.googleMapsUri",
      "places.location",
      "places.priceLevel",
      "places.rating",
    ],
  },
};
const configCity = {
  headers: {
    "Content-Type": "application/json",
    "X-Goog-Api-Key": import.meta.env.VITE_GOOGLE_MAP_API_KEY,
    "X-Goog-FieldMask": [
      "places.name",
      "places.displayName",
      "places.photos",
      "places.googleMapsUri",
      "places.location",
    ],
  },
};

export const PHOTO_URL =
  "https://places.googleapis.com/v1/{replace}/media?maxHeightPx=1000&key=" +
  import.meta.env.VITE_GOOGLE_MAP_API_KEY;

export const getPlaceDetails = (data) =>
  axios.post(BASE_URL, data, configPlace);
export const getCityDetails = (data) => axios.post(BASE_URL, data, configCity);


================================================
File: src/Service/temp.json
================================================
{
  "location": "Bhopal",
  "duration": 3,
  "budget": "Luxury",
  "people": 4,
  "hotels": [
    {
      "name": "Jehan Numa Palace Hotel",
      "description": "A heritage hotel with opulent rooms, a sprawling garden, and a rooftop pool offering panoramic views of the city.",
      "address": "1, Shamla Hills, Near Van Vihar National Park, Bhopal, Madhya Pradesh 462003",
      "rating": 4.5,
      "price": "₹15,000 - ₹30,000 per night",
      "location": "https://goo.gl/maps/j12Q3Z5g5aL9R7T9",
      "coordinates": "23.2594, 77.4096",
      "image_url": "https://images.thrillophilia.com/image/upload/s--7i8t9L4h--/c_fill,f_auto,fl_progressive,h_600,q_auto,w_900/v1/images/photos/000/009/817/original/jehan_numa_palace_hotel_bhopal_hotel_exterior_view.jpg"
    },
    {
      "name": "The Lalit, Bhopal",
      "description": "A modern and luxurious hotel with elegant rooms, a rooftop pool, a spa, and multiple dining options.",
      "address": "122, VIP Road, Near New Market, Bhopal, Madhya Pradesh 462003",
      "rating": 4.2,
      "price": "₹12,000 - ₹25,000 per night",
      "location": "https://goo.gl/maps/bYfX1V85QmG96y3y",
      "coordinates": "23.2582, 77.4118",
      "image_url": "https://www.thelaLit.com/images/hotels/the-lalit-bhopal/home-slider-image-1.jpg"
    },
    {
      "name": "Hotel Lake View Ashok",
      "description": "A lakeside hotel with stunning views of the Upper Lake, comfortable rooms, and an outdoor pool.",
      "address": "Shahpura, Near Van Vihar National Park, Bhopal, Madhya Pradesh 462016",
      "rating": 4,
      "price": "₹8,000 - ₹18,000 per night",
      "location": "https://goo.gl/maps/2D19M97kC451wK7b",
      "coordinates": "23.2438, 77.4253",
      "image_url": "https://www.hotellakeviewashok.com/images/gallery/gallery_3.jpg"
    }
  ],
  "itinerary": [
    {
      "day": 1,
      "title": "Exploring the City's Heart",
      "places": [
        {
          "name": "Bharat Bhavan",
          "details": "A renowned cultural center showcasing Indian art, craft, and literature.",
          "pricing": "Entry Fee: ₹50 per person",
          "timings": "10:00 AM - 6:00 PM",
          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Bharat_Bhavan_Bhopal.jpg/1280px-Bharat_Bhavan_Bhopal.jpg",
          "location": "https://goo.gl/maps/M1aJqM9J9L6YzY9b"
        },
        {
          "name": "Rajwada",
          "details": "A magnificent palace built in the 18th century, showcasing the grandeur of the Bhopal State.",
          "pricing": "Entry Fee: ₹20 per person",
          "timings": "9:00 AM - 6:00 PM",
          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/Rajwada_Bhopal.jpg/1280px-Rajwada_Bhopal.jpg",
          "location": "https://goo.gl/maps/2LhR6YfG84RjX2Q9"
        },
        {
          "name": "Moti Masjid",
          "details": "A beautiful mosque known for its intricate marble work and elegant architecture.",
          "pricing": "Free Entry",
          "timings": "5:00 AM - 8:00 PM",
          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Moti_Masjid_%28Bhopal%29.jpg/1280px-Moti_Masjid_%28Bhopal%29.jpg",
          "location": "https://goo.gl/maps/6D14aU3p13wZ3g83"
        }
      ]
    },
    {
      "day": 2,
      "title": "Nature and History",
      "places": [
        {
          "name": "Van Vihar National Park",
          "details": "A lush green sanctuary home to various wildlife species, ideal for a relaxing day.",
          "pricing": "Entry Fee: ₹50 per person",
          "timings": "8:00 AM - 6:00 PM",
          "image_url": "https://www.bhopal.nic.in/sites/default/files/styles/medium/public/vanvihar_national_park.jpg",
          "location": "https://goo.gl/maps/Y1z3D7CqHq4y4wF7"
        },
        {
          "name": "Upper Lake",
          "details": "A serene lake offering scenic views, boat rides, and a chance to soak in the tranquility.",
          "pricing": "Boat Ride: ₹100 - ₹500 per person",
          "timings": "8:00 AM - 8:00 PM",
          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/0a/Upper_Lake_Bhopal_India.jpg/1280px-Upper_Lake_Bhopal_India.jpg",
          "location": "https://goo.gl/maps/1S1N3bU47N26529v"
        },
        {
          "name": "State Museum",
          "details": "A comprehensive museum showcasing the history, art, and culture of Madhya Pradesh.",
          "pricing": "Entry Fee: ₹20 per person",
          "timings": "10:00 AM - 5:00 PM",
          "image_url": "https://www.bhopal.nic.in/sites/default/files/styles/medium/public/state_museum.jpg",
          "location": "https://goo.gl/maps/v3z4K9C931vD69s8"
        }
      ]
    },
    {
      "day": 3,
      "title": "Religious Sites and Culinary Delights",
      "places": [
        {
          "name": "Taj-ul-Masjid",
          "details": "One of the largest mosques in India, known for its grandeur and intricate architecture.",
          "pricing": "Free Entry",
          "timings": "5:00 AM - 8:00 PM",
          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/f/f3/Taj_ul_Masjid_Bhopal.jpg/1280px-Taj_ul_Masjid_Bhopal.jpg",
          "location": "https://goo.gl/maps/C9M1nR2zW1Qm6K7g"
        },
        {
          "name": "Birla Mandir",
          "details": "A serene Hindu temple dedicated to Lord Vishnu, offering panoramic views of the city.",
          "pricing": "Free Entry",
          "timings": "6:00 AM - 8:00 PM",
          "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Birla_Mandir_Bhopal_India.jpg/1280px-Birla_Mandir_Bhopal_India.jpg",
          "location": "https://goo.gl/maps/2x6kQ76F4c4s776R"
        },
        {
          "name": "Bhopal Food Tour",
          "details": "Experience the rich culinary heritage of Bhopal with a guided food tour, sampling local delicacies.",
          "pricing": "₹1,500 - ₹2,500 per person",
          "timings": "11:00 AM - 3:00 PM",
          "image_url": "https://www.holidify.com/images/cmsuploads/2019/02/08/best-food-in-bhopal_1549636789.jpg",
          "location": "Various locations in the city"
        }
      ]
    }
  ]
}

================================================
File: src/components/constants/Error.jsx
================================================
import React, { Component } from 'react';

class ErrorBoundary extends Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    // Update state so the next render shows the fallback UI.
    return { hasError: true };
  }

  componentDidCatch(error, errorInfo) {
    // You can also log the error to an error reporting service
    console.error("ErrorBoundary caught an error", error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      // You can render any custom fallback UI
      return (
        <div className="error h-screen w-screen flex items-center justify-center bg-black">
            <h1 className='text-3xl sm:text-4xl font-extrabold text-center tracking-tight lg:text-5xl text-white/65'>Somthing went wrong</h1>
        </div>
      )
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


================================================
File: src/components/constants/Options.jsx
================================================
export const SelectBudgetOptions = [
    {
        id:1,
        icon: "💵",
        title:"Cheap",
        desc: "Economize and Save"
    },
    {
        id: 2,
        icon: "💰",
        title:"Moderate",
        desc: "Balance Cost and Comfort"
    },
    {
        id:3,
        icon: "💎",
        title:"Luxury",
        desc: "Induldge without Limits"
    },
]

export const SelectNoOfPersons = [
    {
        id:1,
        icon: "🚶",
        title: "Solo",
        desc: "Discovering on Your Own",
        no: "1 Person"
    },
    {
        id:2,
        icon: "💑",
        title: "Partner",
        desc: "Exploring with a Loved One",
        no: "2 People"
    },
    {
        id:3,
        icon: "👨‍👩‍👧‍👦",
        title: "Family",
        desc: "Fun for All Ages",
        no: "3 to 5 People"
    },
    {
        id:4,
        icon: "🤝",
        title: "Friends",
        desc: "Adventure with Your Crew",
        no: "5 to 10 People"
    },
]

export const PROMPT = "Create an optimal trip itinerary based on the specified location, duration, budget, and number of persons. Generate Travel Plan for Location: {location} for no of days: {noOfDays} Days with no of People or group: {People} with Budget: {Budget}; give me list of hotels with hotel name, description, address, rating, price, location in map, coordinates, image url; also for the same create the itinerary for {noOfDays} days, suggest places, give name, details, pricing, timings, place images urls, location (coordinate or in map); Remember all have to cover in the {Budget} level budget. Important: give the result in JSON Format"

================================================
File: src/components/constants/ProgressBar.jsx
================================================
import nProgress from "nprogress";
import "nprogress/nprogress.css";
import { useEffect } from "react";
import { useLocation } from "react-router-dom";

const ProgressBar = () => {
  const location = useLocation();

  useEffect(() => {
    nProgress.configure({ showSpinner: false });

    nProgress.start();

    const handleComplete = () => {
      nProgress.done();
    };

    const timer = setTimeout(handleComplete, 500);

    return () => {
      clearTimeout(timer);
      nProgress.done();
    };
  }, [location]);

  return null;
};

export default ProgressBar;


================================================
File: src/components/constants/ThemeToggle.jsx
================================================
import useTheme from "@/Context/DarkMode/ThemeProvider";
import { Button } from "../ui/button";
import { Moon, Sun } from "lucide-react";

const ThemeToggle = () => {
  const { theme, setTheme } = useTheme();

  const toggleTheme = () => {
    setTheme(theme === "dark" ? "light" : "dark");
  };

  return (
    <Button variant="outline" size="icon" onClick={toggleTheme}>
      {theme === "dark" ? (
        <Moon className="h-[1.2rem] w-[1.2rem]" />
      ) : (
        <Sun className="h-[1.2rem] w-[1.2rem]" />
      )}
      <span className="sr-only">Toggle theme</span>
    </Button>
  );
}

export default ThemeToggle;


================================================
File: src/components/custom/Footer.jsx
================================================
import React from "react";
import { Button } from "../ui/button";
import { Link } from "react-router-dom";
import {
  AiFillGithub,
  AiFillInstagram,
  AiFillLinkedin,
  AiFillMail,
  AiFillTwitterCircle,
} from "react-icons/ai";

function Footer({ footerRef }) {
  const socialIcons = [
    {
      name: "GitHub",
      icon: <AiFillGithub />,
      link: "https://github.com/satendra03",
    },
    {
      name: "Linkedin",
      icon: <AiFillLinkedin />,
      link: "https://linkedin.com/in/connect-satendra",
    },
    {
      name: "Instagram",
      icon: <AiFillInstagram />,
      link: "https://instagram.com/_satendra_03",
    },
    {
      name: "Mail",
      icon: <AiFillMail />,
      link: "mailto:satendrakumarparteti.work@gmail.com",
    },
    {
      name: "Twitter",
      icon: <AiFillTwitterCircle />,
      link: "https://twitter.com/satendra_03",
    },
  ];
  return (
    <div
      ref={footerRef}
      className="footer w-full flex flex-col text-muted-foreground items-center justify-center md:p-4 py-2 border-t"
    >
      <p className="sm:font-semibold sm:text-lg  bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
        Made by Satendra Kumar Parteti
      </p>
      <div className="logos flex items-center justify-center gap-5 w-full">
        {socialIcons.map((item, index) => {
          return (
            <Link
              key={index}
              to={item.link}
              target="_blank"
              rel="noopener noreferrer"
            >
              {item.icon}
            </Link>
          );
        })}
      </div>
      {/* <div className="more text-sm text-center mt-5 bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
      Honestly, I have no idea what's cooking here! If something’s broken or needs fixing, just ping me and save me from blissful ignorance!
      </div> */}
    </div>
  );
}

export default Footer;






================================================
File: src/components/custom/Header.jsx
================================================
import React, { useContext } from "react";
import { Button } from "../ui/button.jsx";
import { LogInContext } from "@/Context/LogInContext/Login.jsx";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
  DropdownMenuShortcut,
} from "@/components/ui/dropdown-menu";
import { LogInIcon, LogOutIcon, Plane, Plus, User } from "lucide-react";
import { Link } from "react-router-dom";
import ThemeToggle from "../constants/ThemeToggle.jsx";

function Header({headerRef}) {
  const { user, isAuthenticated, logout, loginWithPopup } =
    useContext(LogInContext);
  const LogOut = () => {
    logout();
  };
  const LogIn = () => {
    loginWithPopup();
  };

  return (
    <div
      ref={headerRef}
      className="w-full flex items-center justify-between shadow-sm p-3 md:px-40 border-b"
    >
      <Link to={"/"}>
        <div className="logo flex gap-2 items-center justify-between">
          <div className="img inline-block h-5 w-5 md:h-10 md:w-10">
            <img src="/logo.png" alt="" />
          </div>
          <h1 className="text-lg md:text-3xl font-bold bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-transparent">
            JourneyJolt
          </h1>
        </div>
      </Link>
      <div className=" flex items-center justify-center gap-5">
        <ThemeToggle className="" />
        {isAuthenticated ? (
          <DropdownMenu>
            <DropdownMenuTrigger className="">
              <div className="user flex items-center gap-2 mr-3">
                <h2 className="hidden sm:block text-lg md:text-xl bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent capitalize">
                  Hi {user.given_name || user.nickname}
                </h2>
                <div className="userimg overflow-hidden h-10 w-10 rounded-full">
                  {user.picture ? (
                    <img src={user.picture} alt={user.name} />
                  ) : (
                    <User />
                  )}
                </div>
              </div>
            </DropdownMenuTrigger>
            <DropdownMenuContent className="text-center sm:text-left w-56">
              <DropdownMenuLabel className="font-semibold text-xl flex items-center justify-start gap-2">
                <User /> My Account
              </DropdownMenuLabel>

              <DropdownMenuSeparator />

              <Link to="/all-trips" className="">
                <DropdownMenuItem className="w-full cursor-pointer text-lg flex items-center justify-start gap-2">
                  <Plane /> My Trips
                </DropdownMenuItem>
              </Link>

              <Link to="/plan-a-trip" className="">
                <DropdownMenuItem className="w-full cursor-pointer text-lg flex items-center justify-start gap-2">
                  <Plus /> Create Trip
                </DropdownMenuItem>
              </Link>

              <DropdownMenuSeparator />

              <div className="text-lg flex items-center justify-center p-2">
                <Button
                  variant="destructive"
                  className="w-full text-center"
                  onClick={LogOut}
                >
                  Log Out <LogOutIcon className="h-4" />
                </Button>
              </div>
            </DropdownMenuContent>
          </DropdownMenu>
        ) : (
          <Button onClick={LogIn}>
            Sign In{" "}
            <DropdownMenuShortcut>
              {" "}
              <LogInIcon className="h-4" />
            </DropdownMenuShortcut>
          </Button>
        )}
      </div>
    </div>
  );
}

export default Header;


================================================
File: src/components/custom/Hero.jsx
================================================
import React, { useContext } from "react";
import { Button } from "../ui/button";
import { Link } from "react-router-dom";
import { LogInContext } from "@/Context/LogInContext/Login";
import Marquee from "../ui/marquee";

function Hero({ heroRef }) {
  const { isAuthenticated } = useContext(LogInContext);
  const images = [
    {
      name: "Chichen Itza",
      src: "/hero/chichen.webp",
      link: "https://en.wikipedia.org/wiki/Chichen_Itza",
    },
    {
      name: "Christ the Redeemer",
      src: "/hero/christ.webp",
      link: "https://en.wikipedia.org/wiki/Christ_the_Redeemer_(statue)",
    },
    {
      name: "Colosseum",
      src: "/hero/colosseum.webp",
      link: "https://en.wikipedia.org/wiki/Colosseum",
    },
    {
      name: "Great Pyramid of Giza",
      src: "/hero/giza.webp",
      link: "https://en.wikipedia.org/wiki/Great_Pyramid_of_Giza",
    },
    {
      name: "Machu Picchu",
      src: "/hero/peru.webp",
      link: "https://en.wikipedia.org/wiki/Machu_Picchu",
    },
    {
      name: "Taj Mahal",
      src: "/hero/taj.webp",
      link: "https://en.wikipedia.org/wiki/Taj_Mahal",
    },
    {
      name: "India Gate",
      src: "/hero/india.webp",
      link: "https://en.wikipedia.org/wiki/India_Gate",
    },
    {
      name: "Great Wall of China",
      src: "/hero/wall.webp",
      link: "https://en.wikipedia.org/wiki/Great_Wall_of_China",
    },
    {
      name: "Eiffel Tower",
      src: "/hero/tower.webp",
      link: "https://en.wikipedia.org/wiki/Eiffel_Tower",
    },
    {
      name: "Statue of Liberty",
      src: "/hero/liberty.webp",
      link: "https://en.wikipedia.org/wiki/Statue_of_Liberty",
    },
    {
      name: "Sydney Opera House",
      src: "/hero/sydney.webp",
      link: "https://en.wikipedia.org/wiki/Sydney_Opera_House",
    },
    {
      name: "Mount Everest",
      src: "/hero/everest.webp",
      link: "https://en.wikipedia.org/wiki/Mount_Everest",
    },
    {
      name: "Stonehenge",
      src: "/hero/stonehenge.webp",
      link: "https://en.wikipedia.org/wiki/Stonehenge",
    },
  ];


  const first = images.slice(0, images.length / 2);
  const second = images.slice(images.length / 2);

  return (
    <div
      ref={heroRef}
      className="flex items-center flex-col text-center justify-center min-h-screen py-10"
    >
      <div className="text px-10 md:px-40 flex flex-col items-center justify-center gap-4">
        <div className="heading p-2 md:py-5">
          <h1 className="font-black text-3xl md:text-5xl bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
            Embark on Electrifying <br /> Adventures with
          </h1>
          <h1 className="font-black text-5xl md:text-9xl bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-center text-transparent pb-4">
            JourneyJolt
          </h1>
        </div>
        <div className="desc">
          <h5 className="opacity-90 mx-auto text-center text-lg font-medium tracking-tight text-primary/80 md:text-xl">
            Your trusted trip planner and adventure guide.
          </h5>
        </div>
        <div className="buttons flex flex-col gap-3 md:flex-row">
          <Link to="/plan-a-trip">
            <Button className="">
              {isAuthenticated
                ? "Let's Make Another Trip"
                : "Plan a Trip, It's Free"}
            </Button>
          </Link>
          <Link
            target="_blank"
            rel="noopener noreferrer"
            to="https://www.buymeacoffee.com/satendra03"
          >
            <Button variant="secondary">Buy Me a Coffee</Button>
          </Link>
        </div>
        <div className="marquee relative flex w-[75vw] flex-col items-center justify-center overflow-hidden rounded-lg bg-background">
          <Marquee reverse pauseOnHover className="[--duration:60s]">
            {second.map((item, index) => {
              return (
                <Link
                  key={index}
                  to={item.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="img cursor-pointer border hover:border-foreground transition-all overflow-hidden rounded-md w-[200px] md:w-[250px]"
                >
                  <img
                    src={item.src}
                    alt={item.name}
                    className="h-full hover:scale-110 duration-300"
                    loading="lazy"
                    role="presentation"
                    fetchPriority="high"
                  />
                </Link>
              );
            })}
          </Marquee>
          <Marquee pauseOnHover className="[--duration:60s]">
            {first.map((item, index) => {
              return (
                <Link
                  key={index}
                  to={item.link}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="img cursor-pointer border hover:border-foreground transition-all overflow-hidden rounded-md w-[200px] md:w-[250px]"
                >
                  <img
                    src={item.src}
                    alt={item.name}
                    className="h-full hover:scale-110 duration-300"
                    loading="lazy"
                    role="presentation"
                    fetchPriority="high"
                  />
                </Link>
              );
            })}
          </Marquee>

          <div className="pointer-events-none absolute inset-y-0 left-0 w-1/3 bg-gradient-to-r from-white dark:from-background"></div>
          <div className="pointer-events-none absolute inset-y-0 right-0 w-1/3 bg-gradient-to-l from-white dark:from-background"></div>
        </div>
      </div>
    </div>
  );
}

export default Hero;

// Trip Stats
// const getTotals = async () => {
//   try {
//     const db = getFirestore();

//     const tripsRef = collection(db, "Trips");
//     const usersRef = collection(db, "Users");

//     const tripsSnapshot = await getDocs(tripsRef);
//     const totalTrips = tripsSnapshot.size;

//     const usersSnapshot = await getDocs(usersRef);
//     const totalUsers = usersSnapshot.size;

//     return { totalTrips, totalUsers };
//   } catch (error) {
//     console.error("Error fetching totals: ", error);
//     throw error;
//   }
// };
// const [loading, setLoading] = useState(true);
// const [trips, setTrips] = useState(0);
// const [users, setUsers] = useState(0);
// useEffect(() => {
//   getTotals()
//     .then(({ totalTrips, totalUsers, usersArray }) => {
//       setTrips(totalTrips);
//       setUsers(totalUsers);
//     })
//     .then(() => setLoading(false))
//     .catch((error) => console.error("Failed to fetch totals", error));
// }, []);
// if (loading) {
//   return (
//     <div className="flex items-center flex-col text-center justify-center h-[70vh]">
//       <div className="text px-10 md:px-40 flex flex-col items-center justify-center gap-4">
//         <h1><AiOutlineLoading3Quarters size={80} className="animate-spin" /></h1>
//       </div>
//     </div>
//   );
// }
{
  /*<br />
          <div className="stats">
            <h3 className="scroll-m-20 text-xl font-bold tracking-tight">
              Current Stats
            </h3>
            <div className="nums flex flex-col sm:flex-row sm:w-full items-center justify-center gap-4">
              <Stats text={"Users Registered"} value={users} />
              <Stats text={"Trips Generated"} value={trips} />
            </div>
          </div>*/
}


================================================
File: src/components/custom/Stats.jsx
================================================
import React from "react";
import {
  Card,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import NumberTicker from "../ui/number-ticker";

function Stats({ value, text }) {
  return (
    <Card className="bg-white shadow-lg p-3 rounded-lg border border-gray-200 hover:shadow-xl transition-shadow duration-300 pointer-events-none bg-[radial-gradient(circle_at_50%_200%,rgba(0,0,0,0.2),rgba(255,255,255,0))]">
      <CardHeader className="space-y-2 text-center">
        <CardTitle className="text-3xl sm:text-6xl font-semibold text-black">
          <NumberTicker value={value} />+
        </CardTitle>
        <CardDescription className="text-gray-500 text-base flex flex-col items-center">
        {text}
        </CardDescription>
      </CardHeader>
    </Card>
  );
}

export default Stats;


================================================
File: src/components/routes/all-trips/Alltrips.jsx
================================================
import { LogInContext } from "@/Context/LogInContext/Login";
import { db } from "@/Service/Firebase";
import { collection, getDocs, query, where } from "firebase/firestore";
import React, { useContext, useEffect, useState } from "react";
import AlltripsCard from "./AlltripsCard";
import { Link } from "react-router-dom";

function Alltrips() {
  const { user } = useContext(LogInContext);
  const [allTrips, setAllTrips] = useState([]);

  const getAllTrips = async () => {
    const Query = query(
      collection(db, "Trips"),
      where("userEmail", "==", user?.email)
    );
    const querySnapshot = await getDocs(Query);
    const trips = [];
    querySnapshot.forEach((doc) => {
      trips.push(doc.data());
    });

    const reversedTrips = trips.reverse();
    setAllTrips(reversedTrips);
  };
  useEffect(() => {
    getAllTrips();
  }, [user]);

  return (
    <div className="mb-10">
      <h1 className="text-3xl md:text-5xl font-bold text-center my-5 md:my-10 bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
        All Trips
      </h1>
      <div className="flex gap-3 flex-wrap justify-evenly items-center">
        {allTrips?.length > 0
          ? allTrips?.map((trip, idx) => (
              <Link
                key={idx}
                to={"/my-trips/" + trip.tripId}
                className="w-full md:w-[48%]"
              >
                <AlltripsCard trip={trip} />
              </Link>
            ))
          : [1, 2, 3, 4].map((item, index) => (
              <div
                key={index}
                className="w-[48%] h-52 rounded-md border bg-card-foreground/50 animate-pulse"
              ></div>
            ))}
      </div>
    </div>
  );
}

export default Alltrips;


================================================
File: src/components/routes/all-trips/AlltripsCard.jsx
================================================
import { getCityDetails, PHOTO_URL } from "@/Service/GlobalApi";
import React, { useEffect, useState } from "react";

const AlltripsCard = ({ trip }) => {
  const [cityDets, setCityDets] = useState([]);
  const [photos, setPhotos] = useState("");
  const [Url, setUrl] = useState("");

  const city = trip?.tripData?.location;

  

  const getCityInfo = async () => {
    const data = {
      textQuery: city,
    };
    const result = await getCityDetails(data)
      .then((res) => {
        setCityDets(res.data.places[0]);
        setPhotos(res.data.places[0].photos[0].name);
      })
      .catch((err) => console.log(err));
  };

  useEffect(() => {
    trip && getCityInfo();
  }, [trip]);

  useEffect(() => {
    const url = PHOTO_URL.replace("{replace}", photos);
    setUrl(url);
  }, [photos]);

  return (
    <>
      <div  className="card-card border-foreground/20 p-1 h-full flex flex-col gap-3">
        <div className="img relative h-full rounded-lg overflow-hidden duration-500 group">
          <img
            src={Url || "/logo.png"}
            className="h-56 w-full object-cover group-hover:scale-110 duration-500 transition-all"
            alt={Url || "/logo.png"}
          />
          <div className="absolute inset-0 bg-background/90 flex flex-col items-center justify-center md:opacity-0 md:group-hover:opacity-100 transition-opacity duration-300">
            <span className="bg-gradient-to-b text-lg from-primary/90 to-primary/60 bg-clip-text text-transparent font-bold">
              {trip.userSelection.location}
            </span>
            <span className="bg-gradient-to-b text-lg from-primary/90 to-primary/60 bg-clip-text text-transparent font-bold">
              {trip.userSelection.noOfDays}{" "}
              {trip.userSelection.noOfDays > 1 ? "Days" : "Day"}
            </span>
            <span className="bg-gradient-to-b text-lg from-primary/90 to-primary/60 bg-clip-text text-transparent font-bold">
              {trip.userSelection.Budget} Budget
            </span>
          </div>
        </div>
      </div>
    </>
  );
}

export default AlltripsCard;


================================================
File: src/components/routes/my-trips/Cards/HotelCards.jsx
================================================
import React, { useContext, useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { useMediaQuery } from "react-responsive";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { LogInContext } from "@/Context/LogInContext/Login";
import { getPlaceDetails, PHOTO_URL } from "@/Service/GlobalApi";

function HotelCards({ hotel }) {
  
  const isMobile = useMediaQuery({ query: "(max-width: 445px)" });
  const isSmall = useMediaQuery({ query: "(max-width: 640px)" });

  const [placeDets, setPlaceDets] = useState([]);
  const [photos, setPhotos] = useState("");
  const [Url, setUrl] = useState("");
  const [address, setAddress] = useState("");
  const [location, setLocation] = useState("");

  const { trip } = useContext(LogInContext);
  const city = trip?.tripData?.location;
  const hotels = trip?.tripData?.hotels;

  const getPlaceInfo = async () => {
    const data = {
      textQuery: hotel.name + city,
    };
    const result = await getPlaceDetails(data)
      .then((res) => {
        setPlaceDets(res.data.places[0]);
        setPhotos(res.data.places[0].photos[0].name);
        setAddress(res.data.places[0].formattedAddress);
        setLocation(res.data.places[0].googleMapsUri);
      })
      .catch((err) => console.log(err));
  };
  useEffect(() => {
    trip && getPlaceInfo();
  }, [trip]);

  const getUrl = (name) => {
    return PHOTO_URL.replace("{replace}", name);
  };

  useEffect(() => {
    const url = PHOTO_URL.replace("{replace}", photos);
    setUrl(url);
  }, [photos]);

  return (
    <Link
      className="w-full"
      target="_blank"
      to={
        location
          ? location
          : `https://www.google.com/maps/search/${hotel.name},${city}`
      }
    >
      <Card className="border-foreground/20 p-1 h-full flex flex-col gap-3 hover:scale-105 duration-300">
        <div className="img h-full rounded-lg">
          <img
            src={Url || "/logo.png"}
            // src={hotel.image_url}
            className="h-80 w-full object-cover"
            alt=""
          />
        </div>
        <div className="text-content w-full flex items-center gap-3 justify-between flex-col h-full">
          <CardHeader className="w-full">
            <CardTitle className="opacity-90 w-full text-center text-xl font-black text-primary/80 md:text-3xl">
              {hotel.name}
            </CardTitle>
            <CardDescription className="line-clamp-2 tracking-wide opacity-90 w-full text-center text-sm text-primary/80 md:text-md">
              {hotel.description}
            </CardDescription>
          </CardHeader>
          <CardContent className="w-full">
            <div className="hotel-details">
              <span className="font-medium text-primary/80 opacity-90 text-sm md:text-base tracking-wide">
                ⭐ Rating: {hotel.rating}
              </span>{" "}
              <br />
              <span className="font-medium text-primary/80 opacity-90 text-sm md:text-base tracking-wide">
                💵 Price: {hotel.price}
              </span>{" "}
              <br />
              <span className="font-medium text-primary/80 opacity-90 text-sm md:text-base tracking-wide line-clamp-1">
                📍 Location: {address ? address : hotel.address}
              </span>
            </div>
          </CardContent>
        </div>
      </Card>
    </Link>
  );
}

export default HotelCards;

{
  /* grid mt-4 hover:scale-105 transition-all text-left grid-rows-1 grid-cols-[30%_1fr] h-20 custom-500:grid-cols-[25%_1fr] sm:grid-cols-[20%_1fr] custom-435:h-24 gap-2 items-center sm:items-start p-2 sm:h-40  bg-gray-100 border border-black/10 sm:text-left */
}

// <>
//   {isSmall ? (
//     <Popover className="sm:text-left">
//       <PopoverTrigger>
//         <Card className="grid mt-4 hover:scale-105 transition-all text-left grid-rows-1 grid-cols-[30%_1fr] h-20 custom-500:grid-cols-[25%_1fr] sm:grid-cols-[35%_1fr] custom-435:h-24 gap-2 items-center sm:items-start p-2 sm:h-auto min-w-[250px] bg-gray-100 border border-black/10">
//           <div className="img h-full rounded-lg bg-gray-200 border border-black/10">
//             <img
//               src={Url || "/logo.png"}
//               className="h-full max-h-48 w-full object-cover"
//               alt=""
//             />
//           </div>
//           <div className="text-content w-full">
//             <CardHeader className="">
//               <CardTitle className="sm:font-semibold text-lg">
//                 {hotel.name}
//               </CardTitle>
//               {!isMobile && (
//                 <CardDescription className="text-sm line-clamp-2 ">
//                   {hotel.description}
//                 </CardDescription>
//               )}
//             </CardHeader>
//             <CardContent className="">
//               {isMobile && (
//                 <p className="text-sm text-muted-foreground w-full line-clamp-1">
//                   {hotel.description}
//                 </p>
//               )}
//             </CardContent>
//           </div>
//         </Card>
//       </PopoverTrigger>
//       <PopoverContent>
//         <h3 className="text-lg font-medium leading-none">Description:</h3>
//         <p className="text-muted-foreground">{hotel.description}</p>
//         <div className="mt-4 ">
//           <span className="text-base font-medium">⭐ Rating: </span>{" "}
//           {hotel.rating} <br />
//           <span className="text-base font-medium">💵 Price: </span>{" "}
//           {hotel.price} <br />
//           <span className="text-base font-medium">📍 Location: </span>{" "}
//           {address ? address : hotel.address} <br />
//           <br />
//           <Link
//             to={
//               location
//                 ? location
//                 : `https://www.google.com/maps/search/${hotel.name},${city}`
//             }
//             target="_blank"
//             className="mt-3"
//           >
//             <Button className="w-full">See in Map</Button>
//           </Link>
//         </div>
//       </PopoverContent>
//     </Popover>
//   ) : (
//     <Link
//       className=""
//       target="_blank"
//       to={
//         location
//           ? location
//           : `https://www.google.com/maps/search/${hotel.name},${city}`
//       }
//     >
//       {/* grid mt-4 hover:scale-105 transition-all text-left grid-rows-1 grid-cols-[30%_1fr] h-20 custom-500:grid-cols-[25%_1fr] sm:grid-cols-[20%_1fr] custom-435:h-24 gap-2 items-center sm:items-start p-2 sm:h-40  bg-gray-100 border border-black/10 sm:text-left */}
//       <Card className="">
//         <div className="img h-full rounded-lg bg-gray-200 border border-black/10">
//           <img
//             src={Url || "/logo.png"}
//             // src={hotel.image_url}
//             className="h-full max-h-48 w-full object-cover"
//             alt=""
//           />
//         </div>
//         <div className="text-content w-full flex items-start justify-center flex-col h-full">
//           <CardHeader className="">
//             <CardTitle className="sm:font-semibold text-lg">
//               {hotel.name}
//             </CardTitle>
//             <CardDescription className="text-sm line-clamp-2 ">
//               {hotel.description}
//             </CardDescription>
//           </CardHeader>
//           <CardContent className="">
//             <div className="">
//               <span className="text-base font-medium">
//                 ⭐ Rating: {hotel.rating}
//               </span>{" "}
//               <br />
//               <span className="text-base font-medium">
//                 💵 Price: {hotel.price}
//               </span>{" "}
//               <br />
//               <span className="text-base font-medium">
//                 📍 Location: {address ? address : hotel.address}
//               </span>
//             </div>
//           </CardContent>
//         </div>
//       </Card>

//     </Link>
//   )}
// </>


================================================
File: src/components/routes/my-trips/Cards/PlaceCards.jsx
================================================
import React, { useContext, useEffect, useState } from "react";
import { useMediaQuery } from "react-responsive";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { Link } from "react-router-dom";
import { Button } from "@/components/ui/button";
import { LogInContext } from "@/Context/LogInContext/Login";
import { getPlaceDetails, PHOTO_URL } from "@/Service/GlobalApi";

function PlaceCards({ place }) {
  const isMobile = useMediaQuery({ query: "(max-width: 445px)" });
  const isSmall = useMediaQuery({ query: "(max-width: 640px)" });

  const { trip } = useContext(LogInContext);
  const itinerary = trip?.tripData?.itinerary;
  const city = trip?.tripData?.location;

  const [placeDets, setPlaceDets] = useState([]);
  const [photos, setPhotos] = useState("");
  const [Url, setUrl] = useState("");
  const [address, setAddress] = useState("");
  const [location, setLocation] = useState("");

  const getPlaceInfo = async () => {
    const data = {
      textQuery: place.name + city,
    };
    const result = await getPlaceDetails(data)
      .then((res) => {
        setPlaceDets(res.data.places[0]);
        setPhotos(res.data.places[0].photos[0].name);
        setAddress(res.data.places[0].formattedAddress);
        setLocation(res.data.places[0].googleMapsUri);
      })
      .catch((err) => console.log(err));
  };

  useEffect(() => {
    trip && getPlaceInfo();
  }, [trip]);

  useEffect(() => {
    const url = PHOTO_URL.replace("{replace}", photos);
    setUrl(url);
  }, [photos]);

  return (
    <>
      <Link
        className="w-full"
        target="_blank"
        to={
          location
            ? location
            : `https://www.google.com/maps/search/${place.name},${city}`
        }
      >
        <Card className="border-foreground/20 p-1 h-full flex flex-col gap-3 hover:scale-105 duration-300">
          <div className="img h-full rounded-lg">
            <img
              src={Url || "/logo.png"}
              // src={place.image_url}
              className="h-80 w-full object-cover"
              alt=""
            />
          </div>
          <div className="text-content w-full flex items-center gap-3 justify-between flex-col h-full">
            <CardHeader className="w-full">
              <CardTitle className="opacity-90 w-full text-center text-xl font-black text-primary/80 md:text-3xl">
                {place.name}
              </CardTitle>
              <CardDescription className="line-clamp-2 tracking-wide opacity-90 w-full text-center text-sm text-primary/80 md:text-md">
                {place.details}
              </CardDescription>
            </CardHeader>
            <CardContent className="w-full">
              <div className="places-details">
                <span className="font-medium text-primary/80 opacity-90 text-sm md:text-base tracking-wide">
                  🕒 Timings: {place.timings}{" "}
                </span>
                <br />
                <span className="font-medium text-primary/80 opacity-90 text-sm md:text-base tracking-wide">
                  💵 Price:
                  {place.pricing}{" "}
                </span>{" "}
                <br />
                <span className="font-medium text-primary/80 opacity-90 text-sm md:text-base tracking-wide line-clamp-1">
                  📍 Location: {address ? address : place.address}
                </span>
              </div>
            </CardContent>
          </div>
        </Card>
      </Link>
    </>
  );
}

export default PlaceCards;

// grid mt-4 hover:scale-105 transition-all text-left grid-rows-1 grid-cols-[30%_1fr] h-20 custom-500:grid-cols-[25%_1fr] sm:grid-cols-[35%_1fr] custom-435:h-24 gap-2 items-center sm:items-start p-2 sm:h-auto bg-gray-100 border border-black/10

{
  /* <div className="main ">
        {isSmall ? (
          <Popover className="">
            <PopoverTrigger>
              <Card className="grid mt-4 hover:scale-105 transition-all text-left grid-rows-1 grid-cols-[30%_1fr] h-20 custom-500:grid-cols-[25%_1fr] sm:grid-cols-[35%_1fr] custom-435:h-24 gap-2 items-center sm:items-start p-2 sm:h-auto min-w-[250px] bg-gray-100 border border-black/10">
                <div className="img h-full rounded-lg hover:shadow-xl bg-gray-200 border border-black/10">
                  <img
                    src={Url || "/logo.png"}
                    className="h-full max-h-48 w-full object-cover"
                    alt=""
                  />
                </div>
                <div className="text-content w-full">
                  <CardHeader className="">
                    <CardTitle className="sm:font-semibold text-lg">
                      {place.name}
                    </CardTitle>
                    {!isMobile && (
                      <CardDescription className="text-sm line-clamp-2 ">
                        {place.details}
                      </CardDescription>
                    )}
                  </CardHeader>
                  <CardContent className="">
                    {isMobile && (
                      <p className="text-sm text-muted-foreground w-full line-clamp-1">
                        {place.details}
                      </p>
                    )}
                  </CardContent>
                </div>
              </Card>
            </PopoverTrigger>
            <PopoverContent>
              <h3 className="text-lg font-medium leading-none">Details:</h3>
              <p className="text-muted-foreground">{place.details}</p>
              <div className="mt-4">
                <span className="text-base font-medium">🕒 Timings:</span>{" "}
                {place.timings} <br />
                <span className="text-base font-medium">💵 Price: </span>{" "}
                {place.pricing} <br />
                <span className="text-base font-medium">
                  📍 Location:{" "}
                </span>{" "}
                {address ? address : place.address} <br />
                <br />
                <Link
                  to={
                    location
                      ? location
                      : `https://www.google.com/maps/search/${place.name},${city}`
                  }
                  target="_blank"
                  className="mt-3"
                >
                  <Button className="w-full">See in Map</Button>
                </Link>
              </div>
            </PopoverContent>
          </Popover>
        ) : (
          <Link
            target="_blank"
            to={
              location
                ? location
                : `https://www.google.com/maps/search/${place.name},${city}`
            }
          >
            <Card className="grid mt-4 hover:scale-105 transition-all text-left grid-rows-1 grid-cols-[30%_1fr] h-20 custom-500:grid-cols-[25%_1fr] sm:grid-cols-[35%_1fr] custom-435:h-24 gap-2 items-center sm:items-start p-2 sm:h-auto bg-gray-100 border border-black/10">
              <div className="img h-full rounded-lg bg-gray-200 border border-black/10">
                <img
                  src={Url || "/logo.png"}
                  // src={place.image_url}
                  className="h-full max-h-48 w-full object-cover"
                  alt=""
                />
              </div>
              <div className="text-content w-full flex sm:items-start items-center justify-center flex-col h-full">
                <CardHeader className="">
                  <CardTitle className="sm:font-semibold text-lg">
                    {place.name}
                  </CardTitle>
                  <CardDescription className="text-sm line-clamp-2 ">
                    {place.details}
                  </CardDescription>
                </CardHeader>
                <CardContent className="text-left">
                  <div className="">
                    <span className="text-base font-medium">🕒 Timings:</span>{" "}
                    {place.timings} <br />
                    <span className="text-base font-medium">💵 Price: </span>
                    {place.pricing} <br />
                    <span className="text-base font-medium">
                      📍 Location: {address ? address : place.address}
                    </span>
                  </div>
                </CardContent>
              </div>
            </Card>
          </Link>
        )}
      </div> */
}


================================================
File: src/components/routes/my-trips/Elements/Hotelcard.jsx
================================================
import React, { useContext } from "react";
import { useMediaQuery } from "react-responsive";
import { LogInContext } from "@/Context/LogInContext/Login";
import HotelCards from "../Cards/HotelCards";
import { useRefContext } from "@/Context/RefContext/RefContext";

function Hotelcard() {
  const isMobile = useMediaQuery({ query: "(max-width: 445px)" });
  const isSmall = useMediaQuery({ query: "(max-width: 640px)" });

  const { trip } = useContext(LogInContext);
  const city = trip?.tripData?.location;
  const hotels = trip?.tripData?.hotels;

  const { holetsRef } = useRefContext();

  return (
    <div ref={holetsRef} className="flex flex-col md:flex-row flex-wrap gap-5">
      {hotels?.map((hotel, idx) => {
        return (
          <div key={idx} className="md:w-[48%]">
            <HotelCards className="hotel-card" hotel={hotel} />
          </div>
        );
      })}
    </div>
  );
}

export default Hotelcard;

// <React.Fragment key={idx}>
//   <HotelCards hotel={hotel} />
// </React.Fragment>


================================================
File: src/components/routes/my-trips/Elements/Hotels.jsx
================================================
import React from "react";
import Hotelcard from "./Hotelcard";

function Hotels() {
  return (
    <div className=" my-[15vh]">
      <h2 className="opacity-90 mx-auto text-center text-3xl font-black text-primary/80 md:text-5xl">
        Hotels
      </h2>
      <div className="main-info mt-2 md:mt-4">
        <Hotelcard  />
      </div>
    </div>
  );
}

export default Hotels;


================================================
File: src/components/routes/my-trips/Elements/Locationinfo.jsx
================================================
import { LogInContext } from "@/Context/LogInContext/Login";
import { getCityDetails, PHOTO_URL } from "@/Service/GlobalApi";
import React, { useContext, useEffect, useState } from "react";
import { Link } from "react-router-dom";

import { Card, CardContent } from "@/components/ui/card";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import { useRefContext } from "@/Context/RefContext/RefContext";

function Locationinfo() {
  const { trip } = useContext(LogInContext);
  const [cityDets, setCityDets] = useState([]);
  const [photos, setPhotos] = useState("");
  const [Url, setUrl] = useState("");
  const { locationInfoRef} = useRefContext();

  const [allImages, setAllImages] = useState([]);

  const compliments = [
    "Indeed, a great choice!",
    "Hmm, this is one of the best places—spot on!",
    "Oh, absolutely! That's an excellent pick.",
    "I see you have a knack for picking the best.",
    "Ah, this is top-notch. You've got great taste!",
    "Can't argue with that—brilliant choice!",
    "Wow, you always know how to pick the perfect one.",
    "Hmm, I couldn't agree more—this is fantastic.",
    "This is a fantastic pick, you've got a great eye!",
    "Excellent choice, you nailed it!",
    "You've got a real talent for choosing the best.",
    "Spot on! This is exactly what I would have picked.",
    "Great minds think alike—what a selection!",
    "You've got an excellent sense for this.",
    "This is an amazing choice, very impressive!",
    "I see you've done your research—top choice.",
    "That's a choice I can definitely get behind.",
    "You have a knack for picking winners!",
    "This is a great find—well done!",
    "I couldn't have chosen better myself!",
    "Such a great pick, you really know your stuff.",
    "A fantastic choice, you've got style!",
    "That's a smart decision, I'm impressed!",
    "You have great taste, that's for sure.",
    "This was an obvious winner—great pick!",
    "Wow, this is just perfect—well chosen!",
    "That's a choice full of wisdom and class.",
  ];

  const randomCompliment =
    compliments[Math.floor(Math.random() * compliments.length)];

  const city = trip?.tripData?.location;

  const getCityInfo = async () => {
    const data = {
      textQuery: city,
    };
    const result = await getCityDetails(data)
      .then((res) => {
        setCityDets(res.data.places[0]);
        // console.log("Res Data", res.data.places[0]);
        setAllImages(res.data.places[0].photos);
        setPhotos(res.data.places[0].photos[0].name);
      })
      .catch((err) => console.log(err));
  };

  useEffect(() => {
    trip && getCityInfo();
  }, [trip]);

  const getUrl = (name) => {
    return PHOTO_URL.replace("{replace}", name);
  };

  useEffect(() => {
    const url = PHOTO_URL.replace("{replace}", photos);
    setUrl(url);
  }, [photos]);

  return (
    <div ref={locationInfoRef} className="my-1 md:my-5">
      <div className="location text text-center mb-10">
        <h2 className="text-3xl md:text-5xl font-bold mb-2">
          <span className="bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-transparent">
            {city}{" "}
          </span>{" "}
        </h2>
        <p className="opacity-90 mx-auto text-center text-md font-medium tracking-tight text-primary/80 md:text-xl">
          {randomCompliment}
        </p>
      </div>
      <div className="carousel img opacity-90 mx-auto text-center text-lg font-medium tracking-tight text-primary/80 md:text-lg">
        Take a sneak peek at what's ahead!
      </div>
      <Carousel className="carousel w-full ">
        <CarouselContent>
          {allImages?.map((imgs, index) => (
            <CarouselItem key={index}>
              <div className="p-1 h-full w-full">
                <Card>
                  <CardContent className="flex max-h-[50vh] rounded-lg overflow-hidden h-full w-full items-center justify-center p-1">
                    <img
                      src={
                        getUrl(imgs.name) || "/images/main_img_placeholder.jpg"
                      }
                      className="rounded-lg cursor-pointer"
                      alt={imgs.name}
                    />
                  </CardContent>
                </Card>
              </div>
            </CarouselItem>
          ))}
        </CarouselContent>
        <CarouselPrevious className="hidden md:flex" />
        <CarouselNext className="hidden md:flex" />
      </Carousel>
      {/* <Link to={cityDets.googleMapsUri} className="cursor-pointer">
        <img
          src={Url || "/images/main_img_placeholder.jpg"}
          className="w-full object-cover rounded-lg"
          alt="place"
        />
      </Link> */}
      <h2 className="location-info md:mt-4 opacity-90 mx-auto text-center text-lg font-medium tracking-tight text-primary/80 md:text-xl">
        Ah, these are your picks—looking great so far!
        {/* <span className="bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-transparent">
          Adventure
        </span>{" "} */}
      </h2>
      <div className="location-info flex items-center justify-center py-2 gap-2 mt-2">
        <h3 className="location-info opacity-90 bg-foreground/20 px-2 md:px-4 flex items-center justify-center rounded-md text-center text-md font-medium tracking-tight text-primary/80 md:text-lg">
          💵 {trip?.userSelection?.Budget}
        </h3>
        <h3 className="location-info opacity-90 bg-foreground/20 px-2 md:px-4 flex items-center justify-center rounded-md text-center text-md font-medium tracking-tight text-primary/80 md:text-lg">
          👨‍👩‍👧‍👦 {trip?.userSelection?.People}
        </h3>
        <h3 className="location-info opacity-90 bg-foreground/20 px-2 md:px-4 flex items-center justify-center rounded-md text-center text-md font-medium tracking-tight text-primary/80 md:text-lg">
          📆 {trip?.userSelection?.noOfDays} Day
        </h3>
      </div>
    </div>
  );
}

export default Locationinfo;


================================================
File: src/components/routes/my-trips/Elements/Places.jsx
================================================
import React from "react";
import Placescard from "./Placescard";

function Places() {
  return (
    <div className="my-[15vh]">
      <h2 className="opacity-90 mx-auto text-center text-3xl font-black text-primary/80 md:text-5xl">
        Places
      </h2>
      <div className="main-info mt-2 md:mt-4">
        <Placescard />
      </div>
    </div>
  );
}

export default Places;


================================================
File: src/components/routes/my-trips/Elements/Placescard.jsx
================================================
import React, { useContext } from "react";
import { useMediaQuery } from "react-responsive";
import { LogInContext } from "@/Context/LogInContext/Login";
import PlaceCards from "../Cards/PlaceCards";
import { useRefContext } from "@/Context/RefContext/RefContext";

function Placescard() {
  // const isMobile = useMediaQuery({ query: "(max-width: 445px)" });
  // const isSmall = useMediaQuery({ query: "(max-width: 640px)" });

  const { trip } = useContext(LogInContext);
  const itinerary = trip?.tripData?.itinerary;
  const city = trip?.tripData?.location;

  const { placesRef } = useRefContext();

  return (
    <>
      {itinerary?.map((day, idx) => {
        return (
          <div ref={placesRef} key={idx} className="main-container mt-5 sm:mt-10">
            <div className="places-heading text-center my-5">
              <h3 className="md:text-4xl font-black bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-center text-transparent">
                Day {day.day}
              </h3>
              <h4 className="md:text-3xl text-center text-primary/80">
                {day.title}
              </h4>
            </div>
            <div className="cards flex flex-col md:flex-row flex-wrap gap-5">
              {day.places.map((place, idx) => {
                return (
                  <div key={idx} className="md:w-[48%]">
                    <PlaceCards className="place-card" place={place} />
                  </div>
                );
              })}
            </div>
          </div>
        );
      })}
    </>
  );
}

export default Placescard;


================================================
File: src/components/routes/my-trips/[tripId]/Mytrips.jsx
================================================
import { Button } from '@/components/ui/button';
import { db } from '@/Service/Firebase';
import { doc, getDoc } from 'firebase/firestore';
import React, { useContext, useEffect, useState } from 'react'
import toast from 'react-hot-toast';
import { useParams } from 'react-router-dom'
import Locationinfo from '../Elements/Locationinfo';
import Hotels from '../Elements/Hotels';
import { LogInContext } from '@/Context/LogInContext/Login';
import Places from '../Elements/Places';

function Mytrips() {
  const { tripId } = useParams();
  const { setTrip} = useContext(LogInContext);
  
  const getTripData = async () => {
    const docRef = doc(db, 'Trips', tripId);
    const docSnap = await getDoc(docRef);

    if(docSnap.exists()){
      // console.log("Document data:", docSnap.data());
      setTrip(docSnap.data());
    } else {
      toast.error('No Such Trip');
    }
  };

  useEffect(()=>{
    tripId && getTripData();
  }, [tripId]);
  

  return (
    <div className='py-2'>
      <Locationinfo/>
      <Hotels/>
      <Places/>
    </div>
  )
}

export default Mytrips

================================================
File: src/components/routes/plan-a-trip/CreateTrip.jsx
================================================
import { Input } from "@/components/ui/input";
import React, { useContext, useEffect, useState } from "react";
import GooglePlacesAutocomplete from "react-google-places-autocomplete";
import {
  PROMPT,
  SelectBudgetOptions,
  SelectNoOfPersons,
} from "../../constants/Options";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogClose,
  DialogFooter,
} from "@/components/ui/dialog";
import { FcGoogle } from "react-icons/fc";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import { Button } from "@/components/ui/button";
import toast from "react-hot-toast";
import { chatSession } from "@/Service/AiModel";

import { LogInContext } from "@/Context/LogInContext/Login";

import { db } from "@/Service/Firebase";
import { doc, setDoc } from "firebase/firestore";
import { useNavigate } from "react-router-dom";
import ReactGoogleAutocomplete from "react-google-autocomplete";

function CreateTrip({createTripPageRef}) {
  const [place, setPlace] = useState("");
  const [formData, setFormData] = useState([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();

  const { user, loginWithPopup, isAuthenticated } = useContext(LogInContext);

  const handleInputChange = (name, value) => {
    setFormData((prevState) => ({ ...prevState, [name]: value }));
  };

  const SignIn = async () => {
    loginWithPopup();
  };

  const SaveUser = async () => {
    const User = JSON.parse(localStorage.getItem("User"));
    const id = User?.email;
    await setDoc(doc(db, "Users", id), {
      userName: User?.name,
      userEmail: User?.email,
      userPicture: User?.picture,
      userNickname: User?.nickname,
    });
  };

  useEffect(() => {
    if (user && isAuthenticated) {
      localStorage.setItem("User", JSON.stringify(user));
      SaveUser();
    }
  }, [user]);

  const SaveTrip = async (TripData) => {
    const User = JSON.parse(localStorage.getItem("User"));
    const id = Date.now().toString();
    setIsLoading(true);
    await setDoc(doc(db, "Trips", id), {
      tripId: id,
      userSelection: formData,
      tripData: TripData,

      userName: User?.name,
      userEmail: User?.email,
    });
    setIsLoading(false);
    localStorage.setItem("Trip", JSON.stringify(TripData));
    navigate("/my-trips/" + id);
  };

  const generateTrip = async () => {
    if (!isAuthenticated) {
      toast("Sign In to continue", {
        icon: "⚠️",
      });
      return setIsDialogOpen(true);
    }
    if (
      !formData?.noOfDays ||
      !formData?.location ||
      !formData?.People ||
      !formData?.Budget
    ) {
      return toast.error("Please fill out every field or select every option.");
    }
    if (formData?.noOfDays > 5) {
      return toast.error("Please enter Trip Days less then 5");
    }
    if (formData?.noOfDays < 1) {
      return toast.error("Invalid number of Days");
    }
    const FINAL_PROMPT = PROMPT.replace(/{location}/g, formData?.location)
      .replace(/{noOfDays}/g, formData?.noOfDays)
      .replace(/{People}/g, formData?.People)
      .replace(/{Budget}/g, formData?.Budget);

    try {
      const toastId = toast.loading("Generating Trip", {
        icon: "✈️",
      });

      setIsLoading(true);
      const result = await chatSession.sendMessage(FINAL_PROMPT);
      const trip = JSON.parse(result.response.text());
      setIsLoading(false);
      SaveTrip(trip);

      toast.dismiss(toastId);
      toast.success("Trip Generated Successfully");
    } catch (error) {
      setIsLoading(false);
      toast.dismiss();
      toast.error("Failed to generate trip. Please try again.");
      console.error(error);
    }
  };

  return (
    <div ref={createTripPageRef} className="mt-10 text-center">
      <div className="text">
        <h2 className="text-3xl md:text-5xl font-bold mb-5 flex items-center justify-center">
          <span className="hidden md:block">🚀</span>{" "}
          <span className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
            Share Your Travel Preferences{" "}
          </span>{" "}
          <span className="hidden md:block">🚀</span>
        </h2>
        <p className="opacity-90 mx-auto text-center text-md md:text-xl font-medium tracking-tight text-primary/80">
          Embark on your dream adventure with just a few simple details. <br />
          <span className="bg-gradient-to-b text-2xl from-blue-400 to-blue-700 bg-clip-text text-center text-transparent">
            JourneyJolt
          </span>{" "}
          <br /> will curate a personalized itinerary, crafted to match your
          unique preferences!
        </p>
      </div>

      <div className="form mt-14 flex flex-col gap-16 md:gap-20 ">
        <div className="place">
          <h2 className="font-semibold text-lg md:text-xl mb-3 ">
            <span className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
              Where do you want to Explore?
            </span>{" "}
            🏖️
          </h2>
          <ReactGoogleAutocomplete
            className="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 text-center"
            apiKey={import.meta.env.VITE_GOOGLE_MAP_API_KEY}
            autoFocus
            onPlaceSelected={(place) => {
              setPlace(place);
              handleInputChange("location", place.formatted_address);
            }}
            placeholder="Enter a City"
          />

          {/* Not using this as this was not accepting style and all */}
          {/* <GooglePlacesAutocomplete
            className="bg-red-500"
            apiKey={import.meta.env.VITE_GOOGLE_MAP_API_KEY}
            selectProps={{
              value: place,
              onChange: (place) => {
                setPlace(place);
                handleInputChange("location", place.label);
              },
              placeholder: "Search for a location...",
            }}
          /> */}
        </div>

        <div className="day">
          <h2 className="font-semibold text-lg md:text-xl mb-3 ">
            <span className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
              How long is your Trip?
            </span>{" "}
            🕜
          </h2>
          <Input
            className="text-center"
            placeholder="Ex: 2"
            type="number"
            min="1"
            max="5"
            name="noOfDays"
            required
            onChange={(day) => handleInputChange("noOfDays", day.target.value)}
          />
        </div>

        <div className="budget">
          <h2 className="font-semibold text-lg md:text-xl mb-3 ">
            <span className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
              {" "}
              What is your Budget?
            </span>{" "}
            💳
          </h2>
          <div className="options grid grid-cols-1 gap-5 md:grid-cols-3">
            {SelectBudgetOptions.map((item) => {
              return (
                <div
                  onClick={(e) => handleInputChange("Budget", item.title)}
                  key={item.id}
                  className={`option cursor-pointer transition-all hover:scale-110 p-4 h-32 flex items-center justify-center flex-col border hover:shadow-foreground/10 hover:shadow-md rounded-lg
                  ${
                    formData?.Budget == item.title &&
                    "border border-foreground/80"
                  }
                  `}
                >
                  <h3 className="font-bold text-[15px] md:font-[18px]">
                    {item.icon} <span className={`
                      ${formData?.Budget == item.title ? 
                      "bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-center text-transparent" :
                      ""}
                      `}>{item.title}</span>
                  </h3>
                  <p className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">{item.desc}</p>
                </div>
              );
            })}
          </div>
        </div>

        <div className="people">
          <h2 className="font-semibold  text-lg md:text-xl mb-3 ">
            <span className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
              Who are you traveling with?{" "}
            </span>{" "}
            🚗
          </h2>
          <div className="options grid grid-cols-1 gap-5 md:grid-cols-3">
            {SelectNoOfPersons.map((item) => {
              return (
                <div
                  onClick={(e) => handleInputChange("People", item.no)}
                  key={item.id}
                  className={`option cursor-pointer transition-all hover:scale-110 p-4 h-32 flex items-center justify-center flex-col border rounded-lg hover:shadow-foreground/10 hover:shadow-md
                    ${formData?.People == item.no && "border border-foreground/80"}
                  `}
                >
                  <h3 className="font-bold text-[15px] md:font-[18px]">
                    {item.icon} <span className={`
                      ${formData?.People == item.no ? 
                      "bg-gradient-to-b from-blue-400 to-blue-700 bg-clip-text text-center text-transparent" :
                      ""}
                      `}>{item.title}</span>
                  </h3>
                  <p className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">{item.desc}</p>
                  <p className="bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">{item.no}</p>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      <div className="create-trip-btn w-full flex items-center justify-center h-32">
        <Button disabled={isLoading} onClick={generateTrip}>
          {isLoading ? (
            <AiOutlineLoading3Quarters className="h-6 w-6 animate-spin" />
          ) : (
            "Let's Go 🌏"
          )}
        </Button>
      </div>

      <Dialog
        className="m-4"
        open={isDialogOpen}
        onOpenChange={setIsDialogOpen}
      >
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="text-xl font-bold text-center bg-gradient-to-b from-primary/90 to-primary/60 bg-clip-text text-transparent">
              {user ? "Thank you for LogIn" : "Sign In to Continue"}
            </DialogTitle>
            <DialogDescription>
              <span className="flex gap-2">
                <span className="text-center w-full opacity-90 mx-auto tracking-tight text-primary/80">
                  {user
                    ? "Logged In Securely to JourneyJolt with Google Authentication"
                    : "Sign In to JourneyJolt with Google Authentication Securely"}
                </span>
              </span>
              {user ? (
                ""
              ) : (
                <Button
                  onClick={SignIn}
                  className="w-full mt-5 flex gap-2 items-center justify-center"
                >
                  Sign In with <FcGoogle className="h-5 w-5" />
                </Button>
              )}
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <DialogClose className="w-full">
              <Button variant="outline" className="w-full">
                Close
              </Button>
            </DialogClose>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

export default CreateTrip;


================================================
File: src/components/ui/button.jsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva } from "class-variance-authority";

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Button = React.forwardRef(({ className, variant, size, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"
  return (
    (<Comp
      className={cn(buttonVariants({ variant, size, className }))}
      ref={ref}
      {...props} />)
  );
})
Button.displayName = "Button"

export { Button, buttonVariants }


================================================
File: src/components/ui/card.jsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)}
    {...props} />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col", className)}
    {...props} />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("text-xl font-semibold leading-none tracking-tight", className)}
    {...props} />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center", className)}
    {...props} />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }


================================================
File: src/components/ui/carousel.jsx
================================================
import * as React from "react"
import useEmblaCarousel from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

const CarouselContext = React.createContext(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef((
  {
    orientation = "horizontal",
    opts,
    setApi,
    plugins,
    className,
    children,
    ...props
  },
  ref
) => {
  const [carouselRef, api] = useEmblaCarousel({
    ...opts,
    axis: orientation === "horizontal" ? "x" : "y",
  }, plugins)
  const [canScrollPrev, setCanScrollPrev] = React.useState(false)
  const [canScrollNext, setCanScrollNext] = React.useState(false)

  const onSelect = React.useCallback((api) => {
    if (!api) {
      return
    }

    setCanScrollPrev(api.canScrollPrev())
    setCanScrollNext(api.canScrollNext())
  }, [])

  const scrollPrev = React.useCallback(() => {
    api?.scrollPrev()
  }, [api])

  const scrollNext = React.useCallback(() => {
    api?.scrollNext()
  }, [api])

  const handleKeyDown = React.useCallback((event) => {
    if (event.key === "ArrowLeft") {
      event.preventDefault()
      scrollPrev()
    } else if (event.key === "ArrowRight") {
      event.preventDefault()
      scrollNext()
    }
  }, [scrollPrev, scrollNext])

  React.useEffect(() => {
    if (!api || !setApi) {
      return
    }

    setApi(api)
  }, [api, setApi])

  React.useEffect(() => {
    if (!api) {
      return
    }

    onSelect(api)
    api.on("reInit", onSelect)
    api.on("select", onSelect)

    return () => {
      api?.off("select", onSelect)
    };
  }, [api, onSelect])

  return (
    (<CarouselContext.Provider
      value={{
        carouselRef,
        api: api,
        opts,
        orientation:
          orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
        scrollPrev,
        scrollNext,
        canScrollPrev,
        canScrollNext,
      }}>
      <div
        ref={ref}
        onKeyDownCapture={handleKeyDown}
        className={cn("relative", className)}
        role="region"
        aria-roledescription="carousel"
        {...props}>
        {children}
      </div>
    </CarouselContext.Provider>)
  );
})
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    (<div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props} />
    </div>)
  );
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    (<div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props} />)
  );
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    (<Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn("absolute  h-8 w-8 rounded-full", orientation === "horizontal"
        ? "-left-12 top-1/2 -translate-y-1/2"
        : "-top-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}>
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>)
  );
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    (<Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn("absolute h-8 w-8 rounded-full", orientation === "horizontal"
        ? "-right-12 top-1/2 -translate-y-1/2"
        : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90", className)}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}>
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>)
  );
})
CarouselNext.displayName = "CarouselNext"

export { Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };


================================================
File: src/components/ui/dialog.jsx
================================================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"
// import { LogInContext } from "@/Context/LogInContext/Login"

// import { useContext } from "react"


const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

// const {isDialogOpen, setIsDialogOpen} = useContext(LogInContext);

const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props} />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}>
      {children}
      <DialogPrimitive.Close
        className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        {/* <X className="h-4 w-4" /> */}
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)}
    {...props} />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}) => (
  <div
    className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)}
    {...props} />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props} />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props} />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}


================================================
File: src/components/ui/dropdown-menu.jsx
================================================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}>
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props} />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props} />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}>
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props} />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props} />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}) => {
  return (
    (<span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props} />)
  );
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}


================================================
File: src/components/ui/globe.jsx
================================================
"use client";

import createGlobe from "cobe";
import { useCallback, useEffect, useRef, useState } from "react";

import { cn } from "@/lib/utils";

const GLOBE_CONFIG = {
  width: 800,
  height: 800,
  onRender: () => {},
  devicePixelRatio: 2,
  phi: 0,
  theta: 0.3,
  dark: 0,
  diffuse: 0.4,
  mapSamples: 16000,
  mapBrightness: 1.2,
  baseColor: [1, 1, 1],
  markerColor: [251 / 255, 100 / 255, 21 / 255],
  glowColor: [1, 1, 1],
  markers: [
    { location: [14.5995, 120.9842], size: 0.03 },
    { location: [19.076, 72.8777], size: 0.1 },
    { location: [23.8103, 90.4125], size: 0.05 },
    { location: [30.0444, 31.2357], size: 0.07 },
    { location: [39.9042, 116.4074], size: 0.08 },
    { location: [-23.5505, -46.6333], size: 0.1 },
    { location: [19.4326, -99.1332], size: 0.1 },
    { location: [40.7128, -74.006], size: 0.1 },
    { location: [34.6937, 135.5022], size: 0.05 },
    { location: [41.0082, 28.9784], size: 0.06 },
  ],
};

export default function Globe({
  className,
  config = GLOBE_CONFIG
}) {
  let phi = 0;
  let width = 0;
  const canvasRef = useRef(null);
  const pointerInteracting = useRef(null);
  const pointerInteractionMovement = useRef(0);
  const [r, setR] = useState(0);

  const updatePointerInteraction = (value) => {
    pointerInteracting.current = value;
    if (canvasRef.current) {
      canvasRef.current.style.cursor = value ? "grabbing" : "grab";
    }
  };

  const updateMovement = (clientX) => {
    if (pointerInteracting.current !== null) {
      const delta = clientX - pointerInteracting.current;
      pointerInteractionMovement.current = delta;
      setR(delta / 200);
    }
  };

  const onRender = useCallback((state) => {
    if (!pointerInteracting.current) phi += 0.005;
    state.phi = phi + r;
    state.width = width * 2;
    state.height = width * 2;
  }, [r]);

  const onResize = () => {
    if (canvasRef.current) {
      width = canvasRef.current.offsetWidth;
    }
  };

  useEffect(() => {
    window.addEventListener("resize", onResize);
    onResize();

    const globe = createGlobe(canvasRef.current, {
      ...config,
      width: width * 2,
      height: width * 2,
      onRender,
    });

    setTimeout(() => (canvasRef.current.style.opacity = "1"));
    return () => globe.destroy();
  }, []);

  return (
    (<div
      className={cn("absolute inset-0 mx-auto aspect-[1/1] w-full max-w-[600px]", className)}>
      <canvas
        className={cn(
          "size-full opacity-0 transition-opacity duration-500 [contain:layout_paint_size]"
        )}
        ref={canvasRef}
        onPointerDown={(e) =>
          updatePointerInteraction(e.clientX - pointerInteractionMovement.current)
        }
        onPointerUp={() => updatePointerInteraction(null)}
        onPointerOut={() => updatePointerInteraction(null)}
        onMouseMove={(e) => updateMovement(e.clientX)}
        onTouchMove={(e) =>
          e.touches[0] && updateMovement(e.touches[0].clientX)
        } />
    </div>)
  );
}


================================================
File: src/components/ui/input.jsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
  return (
    (<input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props} />)
  );
})
Input.displayName = "Input"

export { Input }


================================================
File: src/components/ui/marquee.jsx
================================================
import { cn } from "@/lib/utils";

export default function Marquee({
  className,
  reverse = false,
  pauseOnHover = false,
  children,
  vertical = false,
  repeat = 4,
  ...props
}) {
  return (
    (<div
      {...props}
      className={cn(
        "group flex overflow-hidden p-2 [--duration:40s] [--gap:1rem] [gap:var(--gap)]",
        {
          "flex-row": !vertical,
          "flex-col": vertical,
        },
        className
      )}>
      {Array(repeat)
        .fill(0)
        .map((_, i) => (
          <div
            key={i}
            className={cn("flex shrink-0 justify-around [gap:var(--gap)]", {
              "animate-marquee flex-row": !vertical,
              "animate-marquee-vertical flex-col": vertical,
              "group-hover:[animation-play-state:paused]": pauseOnHover,
              "[animation-direction:reverse]": reverse,
            })}>
            {children}
          </div>
        ))}
    </div>)
  );
}


================================================
File: src/components/ui/number-ticker.jsx
================================================
"use client";

import { useEffect, useRef } from "react";
import { useInView, useMotionValue, useSpring } from "framer-motion";

import { cn } from "@/lib/utils";

export default function NumberTicker({
  value,
  direction = "up",
  delay = 0,
  className,
  decimalPlaces = 0
}) {
  const ref = useRef(null);
  const motionValue = useMotionValue(direction === "down" ? value : 0);
  const springValue = useSpring(motionValue, {
    damping: 60,
    stiffness: 100,
  });
  const isInView = useInView(ref, { once: true, margin: "0px" });

  useEffect(() => {
    isInView &&
      setTimeout(() => {
        motionValue.set(direction === "down" ? 0 : value);
      }, delay * 1000);
  }, [motionValue, isInView, delay, value, direction]);

  useEffect(() =>
    springValue.on("change", (latest) => {
      if (ref.current) {
        ref.current.textContent = Intl.NumberFormat("en-US", {
          minimumFractionDigits: decimalPlaces,
          maximumFractionDigits: decimalPlaces,
        }).format(Number(latest.toFixed(decimalPlaces)));
      }
    }), [springValue, decimalPlaces]);

  return (
    (<span
      className={cn(
        "inline-block tabular-nums text-black dark:text-white tracking-wider",
        className
      )}
      ref={ref} />)
  );
}


================================================
File: src/components/ui/popover.jsx
================================================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props} />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }


================================================
File: src/components/ui/sonner.jsx
================================================
import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

const Toaster = ({
  ...props
}) => {
  const { theme = "system" } = useTheme()

  return (
    (<Sonner
      theme={theme}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props} />)
  );
}

export { Toaster }


================================================
File: src/lib/utils.js
================================================
import { clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs) {
  return twMerge(clsx(inputs))
}


