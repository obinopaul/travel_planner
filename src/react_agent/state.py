"""Define the state structures for the agent."""

from __future__ import annotations

from dataclasses import dataclass, field
from typing import Sequence

from langchain_core.messages import AnyMessage
from langgraph.graph import add_messages
from langgraph.managed import IsLastStep
from typing_extensions import Annotated
from dataclasses import dataclass, field
from typing import Any, Optional, List, Dict, Sequence, Annotated
from langchain.schema import BaseMessage
import operator
from datetime import date


@dataclass  
class InputState:
    """Defines the input state for the agent, representing a narrower interface to the outside world.

    This class is used to define the initial state and structure of incoming data.
    """

    messages: Annotated[list[BaseMessage], add_messages] = field(default_factory=list)
    "Stores the sequence of messages exchanged between the user and the agent."
    
    """
    Messages tracking the primary execution state of the agent.

    Typically accumulates a pattern of:
    1. HumanMessage - user input
    2. AIMessage with .tool_calls - agent picking tool(s) to use to collect information
    3. ToolMessage(s) - the responses (or errors) from the executed tools
    4. AIMessage without .tool_calls - agent responding in unstructured format to the user
    5. HumanMessage - user responds with the next conversational turn

    Steps 2-5 may repeat as needed.

    The `add_messages` annotation ensures that new messages are merged with existing ones,
    updating by ID to maintain an "append-only" state unless a message with the same ID is provided.
    """



@dataclass
class OverallState:
    
    # Agent Workflow Tracking
    messages: Annotated[list[BaseMessage], add_messages] = field(default_factory=list)
    "Stores the sequence of messages exchanged between the user and the agent."
    location: Optional[str] = None
    "The user's current location or starting point."
    destination: Optional[str] = None
    "The destination the user wants to travel to."
    budget: Optional[float] = None
    "The user's travel budget in their chosen currency."
    start_date: Optional[date] = None
    "The start date of the trip."
    end_date: Optional[date] = None
    "The end date of the trip."
    num_adults: Optional[int] = None
    "The number of adults traveling."
    num_children: Optional[int] = None
    "The number of children traveling."
    num_rooms: Optional[int] = None
    "The number of rooms required for accommodation."
    
    # User Preferences
    user_preferences: Dict[str, Any] = field(default_factory=dict)
    "Stores the user's input (e.g., destination, budget, dates)."
    
    # Agent Outputs
    flights: Optional[List[Dict[str, Any]]] = None
    "Stores the flight options found by the Flight Finder agent."
    accommodation: Optional[List[Dict[str, Any]]] = None
    "Stores the accommodation options found by the Accommodation Finder agent (hotels, Airbnb, hostels, etc.)."
    activities: Optional[List[Dict[str, Any]]] = None
    "Stores the activity options found by the Activity Planner agent."
    recommendations: Optional[Dict[str, Any]] = None
    "Stores recommendations from the Real-Time Data Provider agent (e.g., car rental, weather, crime rates)."
    warnings: Optional[Dict[str, Any]] = None
    "Stores warnings from the Real-Time Data Provider agent (e.g., high crime areas, visa requirements)."
    itinerary: Optional[Dict[str, Any]] = None
    "Stores the final travel itinerary generated by the Itinerary Generator agent."
     
    
@dataclass
class OutputState:
    """Represents the final output state to be returned to the user or system."""
    messages: Annotated[list[BaseMessage], add_messages] = field(default_factory=list)
    "Stores the sequence of messages exchanged between the user and the agent."
